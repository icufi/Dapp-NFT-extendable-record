{"version":3,"sources":["Styles.js","components/navigation/MainHeader.js","shared/context/auth-context.js","components/form/formik/components/TextField.js","components/form/formik/components/ButtonModal.js","shared/hooks/http-hook.js","shared/components/UIElements/ModalSugFeature.js","components/navigation/NavLinks.js","components/navigation/SideDrawer.js","shared/components/UIElements/Backdrop.js","assets/images/logo3.svg","components/navigation/MainNavigation.js","components/form/formik/components/ButtonFormik.js","shared/components/UIElements/LoadingSpinner.js","components/form/formik/BuilderMinter.js","components/content/usersPage/AccordionUsers.js","components/form/formik/components/SelectField.js","shared/components/UIElements/ModalSugProject.js","components/form/formik/GenRecord.js","components/navigation/alerts/AlertBuilderToken.js","shared/components/util/ScrollToTop.js","shared/components/UIElements/ModalEmailNested.js","shared/components/UIElements/DialogEmailTrx.js","shared/components/UIElements/ModalBTBuyNested.js","components/navigation/alerts/AlertConnectPolygon.js","shared/components/UIElements/Modal.js","shared/components/FormElements/Button.js","shared/components/UIElements/ErrorModal.js","pages/MintRecord.js","components/common/ValueProp.js","pages/Main.js","components/navigation/Footer.js","assets/images/diagrammodemaker.svg","assets/images/simpleRecord.svg","pages/ModeMaker.js","assets/images/1x/verifiedOnwerDog.png","App.js","shared/hooks/auth-hook.js","index.js"],"names":["theme","createTheme","palette","primary","main","secondary","background","default","blue","typography","fontFamily","h3","fontSize","h2","marginTop","marginBottom","h1","h4","h6","h7","useStyles","makeStyles","root","backgroundColor","MainHeader","props","classes","Grid","className","Container","children","AuthContext","createContext","provider","detect","currentAccount","checkWalletIsConnected","BTTokenCheck","chainId","TextFieldFormik","name","otherProps","useField","field","meta","configTextField","fullWidth","variant","touched","error","helperText","TextField","ButtonFormik","submitForm","useFormikContext","configButton","color","onClick","onClose","Box","display","justifyContent","useHttpClient","useState","isLoading","setIsLoading","setError","activeHttpRequests","useRef","sendRequest","useCallback","url","a","method","body","headers","httpAbortCtrl","AbortController","current","push","fetch","signal","response","json","responseData","filter","reqCtrl","ok","Error","message","useEffect","forEach","abortCtrl","abort","clearError","style","position","top","left","transform","width","bgcolor","border","boxShadow","p","borderRadius","INITIAL_FORM_STATE","featureSuggestion","email","FORM_VALIDATION_SCHEMA","Yup","shape","required","max","min","TransitionsModal","onSubmitHandler","event","console","log","process","JSON","stringify","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","open","sx","initialValues","initialTouched","validateOnMount","validationSchema","onSubmit","label","mt","spacing","multiline","rows","ButtonModal","NavLinks","auth","useContext","setOpen","selectedAddress","pb","pr","Typography","size","SideDrawer","content","CSSTransition","show","classNames","mountOnEnter","unmountOnExit","ReactDOM","createPortal","document","getElementById","img","height","MainNavigation","drawerIsOpen","setDrawerIsOpen","closeDrawerHandler","Fragment","to","src","logo3","alt","emailSent","err","handleSubmit","disabled","LoadingSpinner","asOverlay","formWrapper","spinner","marginLeft","errorMsg","quantity","typeError","Accordion","styled","disableGutters","elevation","square","divider","borderBottom","AccordionSummary","expandIcon","mode","flexDirection","AccordionDetails","MuiAccordionDetails","padding","CustomizedAccordions","React","expanded","setExpanded","handleChange","panel","newExpanded","container","item","xs","onChange","id","href","target","SelectField","options","setFieldValue","configSelect","select","value","Object","keys","map","pos","MenuItem","nftProject","nftTokenType","nftTokenId","attrKeyword","emailTo","emailReply","integer","lessThan","SendFormik","supportedNFTProjects","align","cursor","AlertBuilderToken","Stack","Alert","modalControl","severity","AlertTitle","fontWeight","ml","ScrollToTop","window","scrollTo","tokenCount","emailFrom","subject","DialogEmailTrx","record","receipt","owner","mintedObject","scroll","timer","setTimer","setTimeout","descriptionElementRef","descriptionElement","focus","Dialog","DialogTitle","mr","textAlign","DialogActions","AlertConnectPolygon","ModalOverlay","headerClass","header","preventDefault","contentClass","footerClass","footer","Modal","onCancel","Button","inverse","danger","exact","type","ErrorModal","onClear","paddingTop","paddingBottom","alignItems","minHeight","MintRecord","mrrReceipt","setMrrReceipt","setErr","tokenOwner","setTokenOwner","openEmailModal","setOpenEmailModal","alertNoToken","setAlertNoToken","setOpenBTTokenModal","responseMintObject","setResponseMintObject","modeArray","onSubmitMintRecord","modeDNA","DNA","modeName","web3","Web3","eth","net","getId","networkId","PubMint","Contract","PublicRecordBuild","abi","networks","address","payment","utils","toWei","toString","user","then","methods","safeMint","description","image","prCreateDate","attrNFTName","dna","send","from","trx","catch","bool","md","svg","title","uniquifyIDs","mb","loading","paddingRight","ValueProp","setResponse","code","pt","pl","order","sm","GenRecord","Main","Footer","textDecoration","rel","ModeMaker","direction","simpleRecord","diagram","App","routes","setProvider","setCurrentAccount","setChainId","detectProvider","getAccounts","accounts","userAddress","ethereum","on","location","reload","request","useAuth","ReactGA","initialize","pageview","pathname","search","path","Provider","ThemeProvider","render"],"mappings":"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","file":"static/js/main.ce8d8588.chunk.js","sourcesContent":["import { createTheme } from '@mui/material/styles';\r\n\r\nconst theme = createTheme({\r\n  palette: {\r\n    primary: {\r\n      main: '#2a9df4',\r\n    },\r\n    secondary: {\r\n      main: '#ffffff',\r\n    },\r\n    background: {\r\n      default: '#ffffff',\r\n      secondary: '#d5d7e1',\r\n      blue: '#A6E5FF',\r\n    },\r\n  },\r\n  typography: {\r\n\r\n    fontFamily: 'arial',\r\n\r\n    h3: {\r\n      fontFamily: 'Arial',\r\n      fontSize: '2.2rem',\r\n    },\r\n    h2: {\r\n      fontFamily: 'arial',\r\n      fontSize: '2.2rem',\r\n      marginTop: '35px',\r\n      marginBottom: '35px',\r\n    },\r\n    h1: {\r\n      fontFamily: 'arial',\r\n      fontSize: '1.8rem',\r\n    },\r\n    h4: {\r\n      fontFamily: 'arial',\r\n      fontSize: '1.2rem',\r\n    },\r\n    h6: {\r\n      fontFamily: 'arial',\r\n      fontSize: '1rem',\r\n    },\r\n    h7: {\r\n      fontFamily: 'arial',\r\n      fontSize: '.8rem',\r\n    },\r\n  },\r\n});\r\n\r\nexport default theme;\r\n","import React from 'react';\nimport { Container, Grid } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\n\nimport './MainHeader.css';\nimport theme from '../../Styles';\n\nconst useStyles = makeStyles({\n  root: {\n    backgroundColor: theme.palette.background.secondary,\n  }\n});\n\nconst MainHeader = (props) => {\n  const classes = useStyles();\n  return (\n    <Grid className={classes.root}>\n      <Container>\n        <header className='main-header'>{props.children}</header>\n      </Container>\n    </Grid>\n  );\n};\n\nexport default MainHeader;\n","import { createContext } from 'react';\n\nexport const AuthContext = createContext({\n  provider: {},\n  detect: () => {},\n  currentAccount: '',\n  checkWalletIsConnected: () => {},\n  BTTokenCheck: false,\n  chainId: '',\n});\n","import React from 'react';\r\nimport { TextField } from '@mui/material';\r\nimport { useField } from 'formik';\r\n\r\nconst TextFieldFormik = ({ name, ...otherProps }) => {\r\n  const [field, meta] = useField(name);\r\n\r\n  const configTextField = {\r\n    ...field,\r\n    ...otherProps,\r\n    fullWidth: true,\r\n    variant: 'outlined',\r\n  };\r\n\r\n  if (meta && meta.touched && meta.error) {\r\n    configTextField.error = true;\r\n    configTextField.helperText = meta.error;\r\n  }\r\n  return <TextField {...configTextField} />;\r\n};\r\n\r\nexport default TextFieldFormik;\r\n","import React from 'react';\r\nimport { Button, Box } from '@mui/material';\r\nimport { useFormikContext } from 'formik';\r\n\r\nconst ButtonFormik = ({ children, ...otherProps }) => {\r\n  const { submitForm } = useFormikContext();\r\n\r\n  const handleSubmit = () => {\r\n    submitForm();\r\n    otherProps.onClose();\r\n  };\r\n\r\n  const configButton = {\r\n    ...otherProps,\r\n    variant: 'contained',\r\n    color: 'primary',\r\n    fullWidth: true,\r\n    onClick: handleSubmit,\r\n  };\r\n\r\n  return (\r\n    <Box display='flex' justifyContent='flex-start'>\r\n      <Button {...configButton}>{children}</Button>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ButtonFormik;\r\n","import { useState, useCallback, useRef, useEffect } from 'react';\n\nexport const useHttpClient = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState();\n\n  const activeHttpRequests = useRef([]);\n\n  const sendRequest = useCallback(\n    async (url, method = 'GET', body = null, headers = {}) => {\n      setIsLoading(true);\n      const httpAbortCtrl = new AbortController();\n      activeHttpRequests.current.push(httpAbortCtrl);\n\n      try {\n        const response = await fetch(url, {\n          method,\n          body,\n          headers,\n          signal: httpAbortCtrl.signal\n        });\n\n        const responseData = await response.json();\n\n        activeHttpRequests.current = activeHttpRequests.current.filter(\n          reqCtrl => reqCtrl !== httpAbortCtrl\n        );\n\n        if (!response.ok) {\n          throw new Error(responseData.message);\n        }\n\n        setIsLoading(false);\n        return responseData;\n      } catch (err) {\n        setError(err.message);\n        setIsLoading(false);\n        throw err;\n      }\n    },\n    []\n  );\n\n  const clearError = () => {\n    setError(null);\n  };\n\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      activeHttpRequests.current.forEach(abortCtrl => abortCtrl.abort());\n    };\n  }, []);\n\n  return { isLoading, error, sendRequest, clearError };\n};\n","import * as React from 'react';\r\nimport Backdrop from '@mui/material/Backdrop';\r\nimport Box from '@mui/material/Box';\r\nimport Modal from '@mui/material/Modal';\r\nimport Fade from '@mui/material/Fade';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nimport TextFieldFormik from '../../../components/form/formik/components/TextField';\r\nimport ButtonModal from '../../../components/form/formik/components/ButtonModal';\r\nimport { useHttpClient } from '../../../shared/hooks/http-hook';\r\n\r\nimport theme from '../../../Styles';\r\n\r\nconst style = {\r\n  position: 'absolute',\r\n  top: '50%',\r\n  left: '50%',\r\n  transform: 'translate(-50%, -50%)',\r\n  width: 600,\r\n  bgcolor: 'background.paper',\r\n  border: '2px solid #000',\r\n  boxShadow: 24,\r\n  p: 4,\r\n  borderRadius: '6px',\r\n};\r\n\r\nconst INITIAL_FORM_STATE = {\r\n  featureSuggestion: '',\r\n  email: ''\r\n};\r\n\r\nconst FORM_VALIDATION_SCHEMA = Yup.object().shape({\r\n  featureSuggestion: Yup.string().required().max(200, 'Please keep suggestion to less than 200 characters.').min(3),\r\n  email: Yup.string().email('Email is invalid'),\r\n\r\n});\r\n\r\nexport default function TransitionsModal(props) {\r\n  const { sendRequest } = useHttpClient();\r\n\r\n  const onSubmitHandler = async (event) => {\r\n    console.log(event);\r\n    try {\r\n      const response = await sendRequest(\r\n        `${process.env.REACT_APP_BACKEND_URL}/users/suggestion`,\r\n        'POST',\r\n        JSON.stringify({\r\n          featureSuggestion: event.featureSuggestion,\r\n          email: event.email,\r\n        }),\r\n        {\r\n          'Content-Type': 'application/json',\r\n        }\r\n      );\r\n\r\n      console.log(response);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Modal\r\n        aria-labelledby='transition-modal-title'\r\n        aria-describedby='transition-modal-description'\r\n        {...props}\r\n        closeAfterTransition\r\n        BackdropComponent={Backdrop}\r\n        BackdropProps={{\r\n          timeout: 500,\r\n        }}\r\n      >\r\n        <Fade in={props.open}>\r\n          <Box sx={style}>\r\n            <Formik\r\n              initialValues={{ ...INITIAL_FORM_STATE }}\r\n              initialTouched={{\r\n                field: true,\r\n              }}\r\n              validateOnMount\r\n              validationSchema={FORM_VALIDATION_SCHEMA}\r\n              onSubmit={onSubmitHandler}\r\n            >\r\n              <Form>\r\n                <TextFieldFormik\r\n                  name='email'\r\n                  label='Reply email address (optional)'\r\n                />\r\n                <TextFieldFormik\r\n                  sx={{ mt: theme.spacing(2) }}\r\n                  name='featureSuggestion'\r\n                  label='Suggest a feature (200 char max)'\r\n                  multiline={true}\r\n                  rows={5}\r\n                />\r\n                <ButtonModal\r\n                  onClose={props.onClose}\r\n                  sx={{ mt: theme.spacing(2) }}\r\n                >\r\n                  Submit\r\n                </ButtonModal>\r\n              </Form>\r\n            </Formik>\r\n          </Box>\r\n        </Fade>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext, useState } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { Box, Button, Typography } from '@mui/material';\n\nimport { AuthContext } from '../../shared/context/auth-context';\nimport ModalSugFeature from '../../shared/components/UIElements/ModalSugFeature';\nimport './NavLinks.css';\n\nconst NavLinks = (props) => {\n  const auth = useContext(AuthContext);\n  const [open, setOpen] = useState(false);\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <ul className='nav-links'>\n      {auth.provider.selectedAddress ? (\n        <li>\n          <Box\n            display='flex'\n            justifyContent='flex-end'\n            sx={{ pb: '3px', pr: '2px' }}\n          >\n            <Typography sx={{ fontSize: '9px' }}>wallet connected</Typography>\n          </Box>\n\n          <Button\n            sx={{ color: '#FF6600' }}\n            variant='text'\n            size='small'\n            onClick={handleOpen}\n          >\n            suggest a feature\n          </Button>\n        </li>\n      ) : (\n        <li>\n          <Button\n            sx={{ color: '#FF6600' }}\n            variant='text'\n            size='small'\n            onClick={auth.checkWalletIsConnected}\n          >\n            Connect Wallet\n          </Button>\n        </li>\n      )}\n      <ModalSugFeature open={open} onClose={handleClose} />\n    </ul>\n  );\n};\n\nexport default NavLinks;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { CSSTransition } from 'react-transition-group';\n\nimport './SideDrawer.css';\n\nconst SideDrawer = props => {\n  const content = (\n    <CSSTransition\n      in={props.show}\n      timeout={200}\n      classNames=\"slide-in-left\"\n      mountOnEnter\n      unmountOnExit\n    >\n      <aside className=\"side-drawer\" onClick={props.onClick}>{props.children}</aside>\n    </CSSTransition>\n  );\n\n  return ReactDOM.createPortal(content, document.getElementById('drawer-hook'));\n};\n\nexport default SideDrawer;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './Backdrop.css';\r\n\r\nconst Backdrop = props => {\r\n  return ReactDOM.createPortal(\r\n    <div className=\"backdrop\" onClick={props.onClick}></div>,\r\n    document.getElementById('backdrop-hook')\r\n  );\r\n};\r\n\r\nexport default Backdrop;\r\n","export default __webpack_public_path__ + \"static/media/logo3.1b669c77.svg\";","import React, { useState, useContext } from 'react';\nimport { makeStyles } from '@mui/styles';\nimport { Link } from 'react-router-dom';\n\n\nimport MainHeader from './MainHeader';\nimport NavLinks from './NavLinks';\nimport SideDrawer from './SideDrawer';\nimport Backdrop from '../../shared/components/UIElements/Backdrop';\nimport { AuthContext } from '../../shared/context/auth-context';\n\nimport logo3 from '../../assets/images/logo3.svg';\nimport './MainNavigation.css';\n\n\nconst useStyles = makeStyles((theme) => ({\n  img: {\n    width: '100%',\n    height: '100%',\n    borderRadius: 6,\n  },\n}));\n\nconst MainNavigation = (props) => {\n  const auth = useContext(AuthContext);\n  const [drawerIsOpen, setDrawerIsOpen] = useState(false);\n  const classes = useStyles();\n\n  const openDrawerHandler = () => {\n    setDrawerIsOpen(true);\n  };\n\n  const closeDrawerHandler = () => {\n    setDrawerIsOpen(false);\n  };\n\n  return (\n    <React.Fragment>\n      {drawerIsOpen && <Backdrop onClick={closeDrawerHandler} />}\n      <SideDrawer show={drawerIsOpen} onClick={closeDrawerHandler}>\n        <nav className='main-navigation__drawer-nav'>\n          <NavLinks />\n        </nav>\n      </SideDrawer>\n\n      <MainHeader>\n        {!auth.currentAccount && (\n          <button\n            className='main-navigation__menu-btn'\n            onClick={openDrawerHandler}\n          >\n            <span />\n            <span />\n            <span />\n          </button>\n        )}\n        <h1 className='main-navigation__title'>\n          <Link to='/'>\n            <img\n              className={classes.img}\n              src={logo3}\n              alt='Public Record Title'\n              // onClick={() => window.location.reload()}\n            />\n          </Link>\n        </h1>\n        <nav className='main-navigation__header-nav'>\n          <NavLinks />\n        </nav>\n      </MainHeader>\n    </React.Fragment>\n  );\n};\n\nexport default MainNavigation;\n","import React, {useContext} from 'react';\r\nimport { Button } from '@mui/material';\r\nimport { useFormikContext } from 'formik';\r\nimport {AuthContext} from '../../../../shared/context/auth-context';\r\n\r\n\r\nconst ButtonFormik = ({emailSent, response, err, email, children, ...otherProps }) => {\r\n  const { submitForm } = useFormikContext();\r\n  const auth = useContext(AuthContext)\r\n\r\n  const handleSubmit = () => {\r\n    submitForm();\r\n  };\r\n\r\n  let configButton;\r\n  if (email) {\r\n    configButton = {\r\n      ...otherProps,\r\n      onClick: handleSubmit,\r\n    };\r\n  } else {\r\n    configButton = {\r\n      ...otherProps,\r\n      variant: 'contained',\r\n      color: 'primary',\r\n      fullWidth: true,\r\n      onClick: handleSubmit,\r\n    };\r\n  }\r\n\r\n  return <Button disabled={err || response || !auth.currentAccount || emailSent} {...configButton}>{children}</Button>;\r\n};\r\n\r\nexport default ButtonFormik;\r\n","import React from 'react';\n\nimport './LoadingSpinner.css';\n\nconst LoadingSpinner = props => {\n  return (\n    <div className={`${props.asOverlay && 'loading-spinner__overlay'}`}>\n      <div className=\"lds-dual-ring\"></div>\n    </div>\n  );\n};\n\nexport default LoadingSpinner;\n","import React, { useContext, useState } from 'react';\r\nimport { makeStyles } from '@mui/styles';\r\nimport { Container, Grid, Typography, Button } from '@mui/material';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport Web3 from 'web3';\r\n\r\nimport TextFieldFormik from './components/TextField';\r\n\r\nimport ButtonFormik from './components/ButtonFormik';\r\n\r\nimport { AuthContext } from '../../../shared/context/auth-context';\r\nimport BuilderTokensBuild from '../../../assets/contracts/BuilderTokens.json';\r\nimport LoadingSpinner from '../../../shared/components/UIElements/LoadingSpinner';\r\nimport theme from '../../../Styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formWrapper: {\r\n    marginTop: theme.spacing(8),\r\n    marginBottom: theme.spacing(8),\r\n  },\r\n  spinner: {\r\n    marginLeft: theme.spacing(8),\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  errorMsg: {\r\n    color: 'red',\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nconst INITIAL_FORM_STATE = {\r\n  quantity: '',\r\n};\r\n\r\nconst FORM_VALIDATION_SCHEMA = Yup.object().shape({\r\n  quantity: Yup.number()\r\n    .max(100, 'No more than 100 can be minted at a time.')\r\n    .typeError('Invalid Number')\r\n    .required('Required'),\r\n});\r\n\r\n// uses formik to create a form\r\nconst BuilderMinter = (props) => {\r\n  const auth = useContext(AuthContext);\r\n  const [receipt, setReceipt] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n\r\n  const classes = useStyles();\r\n\r\n  const onSubmitHandler = async (event) => {\r\n    setIsLoading(true);\r\n    setError('');\r\n    console.log(error);\r\n    const web3 = new Web3(auth.provider);\r\n    const networkId = await web3.eth.net.getId();\r\n    console.log('submit Handler:', auth.provider.selectedAddress);\r\n\r\n    const iconMint = new web3.eth.Contract(\r\n      BuilderTokensBuild.abi,\r\n      BuilderTokensBuild.networks[networkId].address\r\n    );\r\n\r\n    console.log(BuilderTokensBuild.networks[networkId].address);\r\n\r\n    const value = event.quantity * 0.005;\r\n    console.log('value:', value);\r\n\r\n    const payment = web3.utils.toWei(value.toString(), 'ether');\r\n    console.log(payment);\r\n\r\n    try {\r\n      await iconMint.methods\r\n        .mint(event.quantity)\r\n        .send({\r\n          from: auth.provider.selectedAddress,\r\n          value: payment,\r\n        })\r\n\r\n        .then(function (receipt) {\r\n          setIsLoading(false);\r\n          setReceipt([receipt]);\r\n          console.log(receipt);\r\n        });\r\n    } catch (err) {\r\n      console.log(err.message);\r\n      setIsLoading(false);\r\n      setError(err.message);\r\n    }\r\n\r\n    event.quantity = '';\r\n  };\r\n\r\n  return (\r\n    <Grid container>\r\n      <Grid item xs={12}>\r\n        <Container>\r\n          <div className={classes.formWrapper}>\r\n            <Formik\r\n              initialValues={{ ...INITIAL_FORM_STATE }}\r\n              validationSchema={FORM_VALIDATION_SCHEMA}\r\n              onSubmit={onSubmitHandler}\r\n            >\r\n              <Form>\r\n                <Grid container sx={{ dispaly: 'flex' }} spacing={2}>\r\n                  <Grid item xs={12}>\r\n                    <Typography variant='h4'>IconsTest NFT Minter</Typography>\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <Typography>Cost 50 MATIC Per NFT</Typography>\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <TextFieldFormik name='quantity' label='Quantity?' />\r\n                  </Grid>\r\n                  {!auth.provider.selectedAddress && (\r\n                    <Grid item xs={10} md={4}>\r\n                      <Button\r\n                        onClick={auth.checkWalletIsConnected}\r\n                        variant='outlined'\r\n                        size='small'\r\n                      >\r\n                        Connect Wallet\r\n                      </Button>\r\n                    </Grid>\r\n                  )}\r\n                  {auth.provider.selectedAddress && (\r\n                    <Grid item xs={6} md={3}>\r\n                      <ButtonFormik>Mint NFT!</ButtonFormik>\r\n                    </Grid>\r\n                  )}\r\n                  {isLoading && (\r\n                    <Grid className={classes.spinner}>\r\n                      <LoadingSpinner />\r\n                    </Grid>\r\n                  )}\r\n                  {receipt.map((receipt) => (\r\n                    <Grid key='grid1' item xs={12}>\r\n                      <Typography key='success' variant='h4'>\r\n                        Success!\r\n                      </Typography>\r\n                      <Typography\r\n                        key='receipt'\r\n                        sx={{ paddingTop: theme.spacing(4) }}\r\n                      >\r\n                        Receipt:\r\n                      </Typography>\r\n                      <Grid key='grid2'>\r\n                        <Typography key={receipt.from} variant='h7'>\r\n                          NFT minted to: {receipt.from}\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid key='grid3'>\r\n                        <Typography\r\n                          className={classes.receipt}\r\n                          key={receipt.transactionHash}\r\n                          variant='h7'\r\n                        >\r\n                          Transaction Hash: {receipt.transactionHash}\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid key='grid4'>\r\n                        <Typography key={receipt.blockHash} variant='h7'>\r\n                          Block Hash: {receipt.blockHash}\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid key='grid5'>\r\n                        <Typography key={receipt.blockNumber} variant='h7'>\r\n                          Block Number: {receipt.blockNumber}\r\n                        </Typography>\r\n                      </Grid>\r\n                    </Grid>\r\n                  ))}\r\n                  {error && (\r\n                    <Grid\r\n                      sx={{\r\n                        paddingTop: theme.spacing(2),\r\n                        paddingLeft: theme.spacing(1),\r\n                      }}\r\n                    >\r\n                      <Typography variant='h7' sx={{ color: 'red' }}>\r\n                        {error}\r\n                      </Typography>\r\n                    </Grid>\r\n                  )}\r\n                </Grid>\r\n              </Form>\r\n            </Formik>\r\n          </div>\r\n        </Container>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default BuilderMinter;\r\n","import * as React from 'react';\r\nimport { styled } from '@mui/material/styles';\r\n\r\nimport Grid from '@mui/material/Grid';\r\nimport Container from '@mui/material/Container';\r\nimport MuiAccordion from '@mui/material/Accordion';\r\nimport MuiAccordionSummary from '@mui/material/AccordionSummary';\r\nimport MuiAccordionDetails from '@mui/material/AccordionDetails';\r\nimport Box from '@mui/material/Box';\r\nimport Typography from '@mui/material/Typography';\r\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\r\n\r\nconst Accordion = styled((props) => (\r\n  <MuiAccordion disableGutters elevation={0} square {...props} />\r\n))(({ theme }) => ({\r\n  marginTop: theme.spacing(3),\r\n  background: 'transparent',\r\n  border: `0px solid ${theme.palette.divider}`,\r\n  '&:not(:last-child)': {\r\n    borderBottom: 0,\r\n  },\r\n  '&:before': {\r\n    display: 'none',\r\n  },\r\n}));\r\n\r\nconst AccordionSummary = styled((props) => (\r\n  <MuiAccordionSummary\r\n    expandIcon={<KeyboardArrowDownIcon sx={{ fontSize: '1.4rem' }} />}\r\n    {...props}\r\n  />\r\n))(({ theme }) => ({\r\n  backgroundColor:\r\n    theme.palette.mode === 'dark'\r\n      ? 'rgba(255, 255, 255, .05)'\r\n      : 'rgba(0, 0, 0, .00)',\r\n  flexDirection: 'row',\r\n  '& .MuiAccordionSummary-expandIconWrapper.Mui-expanded': {\r\n    transform: 'rotate(180deg)',\r\n  },\r\n  '& .MuiAccordionSummary-content': {\r\n    // marginLeft: theme.spacing(6),\r\n  },\r\n}));\r\n\r\nconst AccordionDetails = styled(MuiAccordionDetails)(({ theme }) => ({\r\n  padding: theme.spacing(),\r\n}));\r\n\r\nexport default function CustomizedAccordions() {\r\n  const [expanded, setExpanded] = React.useState('panel1');\r\n\r\n  const handleChange = (panel) => (event, newExpanded) => {\r\n    setExpanded(newExpanded ? panel : false);\r\n  };\r\n\r\n  return (\r\n    <Container sx={{ marginTop: 15 }}>\r\n      <Grid container>\r\n        <Grid item xs={1}></Grid>\r\n        <Grid item xs={10}>\r\n          <Accordion\r\n            expanded={expanded === 'panel1'}\r\n            onChange={handleChange('panel1')}\r\n          >\r\n            <AccordionSummary\r\n              aria-controls='panel1bh-content'\r\n              id='panel1bh-header'\r\n            >\r\n              <Typography sx={{ fontSize: '42px' }} variant='h4'>\r\n                What is Visible?\r\n              </Typography>\r\n            </AccordionSummary>\r\n            <AccordionDetails>\r\n              <Box sx={{ marginBottom: '1rem' }}>\r\n                <strong>\r\n                  NFT owners use Visible to make new modes from their existing NFTs.\r\n                </strong>\r\n                <ul>\r\n                  <li>Modes are visual records.</li>\r\n                  <li>Modes have on-chain metadata and unalterable messages.</li>\r\n                  <li>Only NFT owners can make a mode.</li>\r\n                  <li>\r\n                    Use the right mode in a specific context to build an on-chain provenance for you.\r\n                  </li>\r\n                  <li>Modes are transferable ERC-721 NFTs themselves.</li>\r\n                  <li>You own the modes you create at Visible.</li>\r\n                  <li>\r\n                    Modes can be sold or traded on marketplaces like Opensea.\r\n                  </li>\r\n                </ul>\r\n              </Box>\r\n            </AccordionDetails>\r\n          </Accordion>\r\n          <Accordion\r\n            expanded={expanded === 'panel5'}\r\n            onChange={handleChange('panel5')}\r\n          >\r\n            <AccordionSummary\r\n              aria-controls='panel1bh-content'\r\n              id='panel1bh-header'\r\n            >\r\n              <Typography sx={{ fontSize: '42px' }} variant='h4'>\r\n                Pricing\r\n              </Typography>\r\n            </AccordionSummary>\r\n            <AccordionDetails>\r\n              <Box>\r\n                <strong>Mode Pricing</strong>\r\n                <ul>\r\n                  <li>Modes are ERC-721 NFTs.</li>\r\n                  <li>\r\n                    Price to mint 1 mode is 6 Matic each plus transaction costs\r\n                    (pennies on Polygon).\r\n                  </li>\r\n                  <li>\r\n                    You must own 1 Builder Token at your address before minting\r\n                    any modes.\r\n                  </li>\r\n                  <li>\r\n                    Owning 1 Builder Token grants access to all services on\r\n                    Visible.\r\n                  </li>\r\n                </ul>\r\n                <strong>Builder Token Pricing</strong>\r\n                <ul>\r\n                  <li>Builder Tokens are ERC-721 NFTs.</li>\r\n                  <li>Builder Tokens are 60 Matic each.</li>\r\n                  <li>\r\n                    You will be prompted to purchase a Builder Token before\r\n                    minting your first mode.\r\n                  </li>\r\n                </ul>\r\n              </Box>\r\n            </AccordionDetails>\r\n          </Accordion>\r\n          <Accordion\r\n            expanded={expanded === 'panel2'}\r\n            onChange={handleChange('panel2')}\r\n          >\r\n            <AccordionSummary\r\n              aria-controls='panel1bh-content'\r\n              id='panel1bh-header'\r\n            >\r\n              <Typography sx={{ fontSize: '42px' }} variant='h4'>\r\n                NFT Owner Verification\r\n              </Typography>\r\n            </AccordionSummary>\r\n            <AccordionDetails>\r\n              <Box>\r\n                <strong>\r\n                 Generating reliable custom user data is Visible's service.\r\n                </strong>\r\n                <ul>\r\n                  <li>\r\n                    Only a verified owner address can make a mode for an NFT.\r\n                  </li>\r\n                  <li>\r\n                    Owner verification is conducted by layering calls to NFT\r\n                    source contracts.\r\n                  </li>\r\n                </ul>\r\n              </Box>\r\n              <Box>\r\n                <strong>\r\n                  NFT ownership is checked on-chain 3 times during record\r\n                  creation.\r\n                </strong>\r\n                <ol>\r\n                  <li>\r\n                    The first check occurs before a new record preview is\r\n                    generated.\r\n                  </li>\r\n                  <li>The second check occurs prior to record creation.</li>\r\n                  <li>The third check occurs after record creation.</li>\r\n                  <li>\r\n                    If any of these checks fail, the record will not be\r\n                    generated or accessible.\r\n                  </li>\r\n                  <li>\r\n                    After NFT ownership is verified, the new record is\r\n                    unalterable, freely accessible and transferable.\r\n                  </li>\r\n                </ol>\r\n              </Box>\r\n              <Box>\r\n                <strong>Security</strong>\r\n                <ul>\r\n                  <li>\r\n                    Users are <strong>never</strong> asked to sign any\r\n                    transaction to prove NFT ownership.\r\n                  </li>\r\n                  <li>\r\n                    The only transaction that takes place on Visible is the minting to new ERC-721 tokens (NFTs).\r\n                  </li>\r\n                  <li>\r\n                    New records, modes and NFTs are minted on the Polygon blockchain.\r\n                  </li>\r\n                  <li>\r\n                    Your transactions on Polygon cannot affect the security of NFTs\r\n                    on Ethereum.\r\n                  </li>\r\n                </ul>\r\n              </Box>\r\n            </AccordionDetails>\r\n          </Accordion>\r\n          <Accordion\r\n            expanded={expanded === 'panel3'}\r\n            onChange={handleChange('panel3')}\r\n          >\r\n            <AccordionSummary\r\n              aria-controls='panel1bh-content'\r\n              id='panel1bh-header'\r\n            >\r\n              <Typography sx={{ fontSize: '42px' }} variant='h4'>\r\n                About Polygon?\r\n              </Typography>\r\n            </AccordionSummary>\r\n            <AccordionDetails>\r\n              <Box>\r\n                <strong>Metamask supports Polygon</strong>\r\n                <ul>\r\n                  <li>\r\n                    Set up:{' '}\r\n                    <a\r\n                      href='https://docs.polygon.technology/docs/develop/metamask/config-polygon-on-metamask/'\r\n                      target='blank'\r\n                    >\r\n                      Metamask for Polygon\r\n                    </a>\r\n                    .\r\n                  </li>\r\n                  <li>Polygon uses a currency called Matic. </li>\r\n                  <li>\r\n                    <a\r\n                      href='https://wallet.polygon.technology/login?next=%2Fbridge%2F'\r\n                      target='blank'\r\n                    >\r\n                      Bridge (transfer) ETH to Matic Here\r\n                    </a>\r\n                  </li>\r\n                  <li>\r\n                    Learn:{' '}\r\n                    <a\r\n                      href='https://consensys.net/blog/metamask/how-to-bridge-tokens-from-ethereum-to-polygon-with-metamask/'\r\n                      target='blank'\r\n                    >\r\n                      Bridging ETH to Matic\r\n                    </a>\r\n                    .\r\n                  </li>\r\n                </ul>\r\n                <strong>What is Polygon?</strong>\r\n                <ul>\r\n                  <li>Use Polygon exactly like Ethereum.</li>\r\n                  <li>\r\n                    Polygon was created to deliver Ethereum services at scale.\r\n                  </li>\r\n                  <li>Polygon gas fees are pennies per transaction.</li>\r\n                </ul>\r\n                <strong>Why use Polygon?</strong>\r\n                <ul>\r\n                  <li>Affordable network transaction fees.</li>\r\n                  <li>\r\n                    Services with substantial data storage requirements are cost effective on\r\n                    Polygon.\r\n                  </li>\r\n                  <li>\r\n                    Like Ethereum NFTs, NFTs/modes minted on Polygon can be\r\n                    traded at marketplaces like Opensea.\r\n                  </li>\r\n                  <li>Assets can be transfered easily between Polygon and Ethereum.</li>\r\n                </ul>\r\n                <strong>Security of your Ethereum NFTs.</strong>\r\n                <ul>\r\n                  <li>\r\n                    Connecting your wallet on Polygon cannot affect your\r\n                    Ethereum NFTs.\r\n                  </li>\r\n                  <li>\r\n                    Transactions on Polygon cannot affect ownership of\r\n                    Ethereum NFTs.\r\n                  </li>\r\n                  <li>\r\n                    Creating new modes on Visible cannot affect the ownership of\r\n                    existing NFT's.\r\n                  </li>\r\n                </ul>\r\n              </Box>\r\n            </AccordionDetails>\r\n          </Accordion>\r\n          <Accordion\r\n            expanded={expanded === 'panel4'}\r\n            onChange={handleChange('panel4')}\r\n          >\r\n            <AccordionSummary\r\n              aria-controls='panel1bh-content'\r\n              id='panel1bh-header'\r\n            >\r\n              <Typography sx={{ fontSize: '42px' }} variant='h4'>\r\n                Builder Tokens\r\n              </Typography>\r\n            </AccordionSummary>\r\n            <AccordionDetails>\r\n              <Box>\r\n                <strong>What are Builder Tokens?</strong>\r\n                <ul>\r\n                  <li>Builder Tokens are NFTs Visible has created.</li>\r\n                  <li>\r\n                    Owning 1 Builder Token grants access to all services on\r\n                    Visible.\r\n                  </li>\r\n                  <li>Builder Tokens are available on Polygon.</li>\r\n                  <li>\r\n                    You will be prompted to purchase a Builder Token prior to\r\n                    minting your first NFT mode.\r\n                  </li>\r\n                </ul>\r\n              </Box>\r\n            </AccordionDetails>\r\n          </Accordion>\r\n\r\n          <Accordion\r\n            expanded={expanded === 'panel6'}\r\n            onChange={handleChange('panel6')}\r\n          >\r\n            <AccordionSummary\r\n              aria-controls='panel1bh-content'\r\n              id='panel1bh-header'\r\n            >\r\n              <Typography sx={{ fontSize: '42px' }} variant='h4'>\r\n                Who is Visible?\r\n              </Typography>\r\n            </AccordionSummary>\r\n            <AccordionDetails>\r\n              <Box>\r\n                <strong>\r\n                  Visible builds services for NFT owners and artists.\r\n                </strong>\r\n                <ul>\r\n                  <li>\r\n                    We have a big expansive view of the long term importance of\r\n                    NFTs.\r\n                  </li>\r\n                  <li>We think NFTs can build worlds.</li>\r\n                  <li>We aim to find out how.</li>\r\n                </ul>\r\n              </Box>\r\n            </AccordionDetails>\r\n          </Accordion>\r\n        </Grid>\r\n        <Grid item xs={1}></Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n}\r\n","import React from 'react'\r\nimport { TextField, MenuItem } from '@mui/material'\r\nimport {useField, useFormikContext} from 'formik'\r\n\r\nconst SelectField = ({name, options, ...otherProps}) => {\r\n\r\n    const {setFieldValue} = useFormikContext()\r\n    const [field, meta] = useField(name);\r\n\r\nconst handleChange = (event) => {\r\n    const {value} = event.target;\r\n    setFieldValue(name, value);\r\n}\r\n\r\n\r\n    const configSelect = {\r\n        ...otherProps,\r\n        ...field,\r\n          select: true,\r\n          variant: 'outlined',\r\n          fullWidth: true,\r\n          onChange: handleChange,\r\n    }\r\n\r\n    if (meta && meta.touched && meta.error) {\r\n        configSelect.error = true;\r\n        configSelect.helperText = meta.error;\r\n    }\r\n\r\n    return (\r\n        <TextField {...configSelect}>\r\n        {Object.keys(options).map((item, pos) => (\r\n            <MenuItem key={pos} value={item}>{options[item]}</MenuItem>\r\n        ))}\r\n        </TextField>\r\n    )\r\n}\r\n\r\nexport default SelectField\r\n","import * as React from 'react';\r\nimport Backdrop from '@mui/material/Backdrop';\r\nimport Box from '@mui/material/Box';\r\nimport Modal from '@mui/material/Modal';\r\nimport Fade from '@mui/material/Fade';\r\nimport { Formik, Form } from 'formik';\r\n\r\nimport TextFieldFormik from '../../../components/form/formik/components/TextField';\r\nimport ButtonModal from '../../../components/form/formik/components/ButtonModal';\r\nimport { useHttpClient } from '../../../shared/hooks/http-hook';\r\nimport * as Yup from 'yup';\r\n\r\nimport theme from '../../../Styles';\r\n\r\nconst style = {\r\n  position: 'absolute',\r\n  top: '50%',\r\n  left: '50%',\r\n  transform: 'translate(-50%, -50%)',\r\n  width: 600,\r\n  bgcolor: 'background.paper',\r\n  border: '2px solid #000',\r\n  boxShadow: 24,\r\n  p: 4,\r\n  borderRadius: '6px',\r\n};\r\n\r\nconst INITIAL_FORM_STATE = {\r\n  nftProject: '',\r\n};\r\n\r\nconst FORM_VALIDATION_SCHEMA = Yup.object().shape({\r\n  nftProject: Yup.string()\r\n    .required()\r\n    .max(60, 'Please keep suggestion to less than 60 characters.').min(3),\r\n});\r\n\r\nexport default function TransitionsModal(props) {\r\n  const { sendRequest } = useHttpClient();\r\n\r\n  const onSubmitHandler = async (event) => {\r\n    console.log(event);\r\n    try {\r\n      const response = await sendRequest(\r\n        `${process.env.REACT_APP_BACKEND_URL}/users/suggestion`,\r\n        'POST',\r\n        JSON.stringify({\r\n          nftProject: event.nftProject,\r\n        }),\r\n        {\r\n          'Content-Type': 'application/json',\r\n        }\r\n      );\r\n\r\n      console.log(response);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Modal\r\n        aria-labelledby='transition-modal-title'\r\n        aria-describedby='transition-modal-description'\r\n        {...props}\r\n        closeAfterTransition\r\n        BackdropComponent={Backdrop}\r\n        BackdropProps={{\r\n          timeout: 500,\r\n        }}\r\n      >\r\n        <Fade in={props.open}>\r\n          <Box sx={style}>\r\n            <Formik\r\n              initialValues={{ ...INITIAL_FORM_STATE }}\r\n              validationSchema={FORM_VALIDATION_SCHEMA}\r\n              onSubmit={onSubmitHandler}\r\n            >\r\n              <Form>\r\n                <TextFieldFormik name='nftProject' label='Suggest an NFT project' />\r\n                <ButtonModal\r\n                  onClose={props.onClose}\r\n                  sx={{ mt: theme.spacing(2) }}\r\n                >\r\n                  Submit\r\n                </ButtonModal>\r\n              </Form>\r\n            </Formik>\r\n          </Box>\r\n        </Fade>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useContext } from 'react';\r\nimport { Container, Grid, Typography } from '@mui/material';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nimport TextFieldFormik from './components/TextField';\r\nimport SelectFieldFormik from './components/SelectField';\r\nimport supportedNFTProjects from '../../../assets/supportedNFTProjects.json';\r\nimport ButtonFormik from './components/ButtonFormik';\r\n\r\n\r\nimport { AuthContext } from '../../../shared/context/auth-context';\r\nimport ModalSugProject from '../../../shared/components/UIElements/ModalSugProject';\r\n\r\n\r\n\r\nconst INITIAL_FORM_STATE = {\r\n  nftTokenType: '',\r\n  nftTokenId: '',\r\n  message: '',\r\n  attrKeyword: '',\r\n  emailTo: '',\r\n  emailReply: '',\r\n};\r\n\r\nconst FORM_VALIDATION_SCHEMA = Yup.object().shape({\r\n  nftTokenType: Yup.string().required(\r\n    '(required).'\r\n  ),\r\n  nftTokenId: Yup.number()\r\n    .required('A token Id number is required.')\r\n    .integer()\r\n    .lessThan(10000)\r\n    .typeError('Only numeric digits, no letters or special characters.'),\r\n  message: Yup.string().max(\r\n    200,\r\n    'On chain messages can be a maximum of 200 characters.'\r\n  ),\r\n  attrKeyword: Yup.string().max(\r\n    20,\r\n    'On chain keywords can be a maximum of 20 characters.'\r\n  ),\r\n  emailTo: Yup.string().email('Email is invalid'),\r\n  emailReply: Yup.string().email('Email is invalid'),\r\n});\r\n\r\nconst SendFormik = (props) => {\r\n\r\n  const auth = useContext(AuthContext);\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <Container>\r\n      <Formik\r\n        initialValues={{ ...INITIAL_FORM_STATE }}\r\n        validationSchema={FORM_VALIDATION_SCHEMA}\r\n        onSubmit={props.onSubmit}\r\n      >\r\n        <Form>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n              <SelectFieldFormik\r\n                name='nftTokenType'\r\n                label='Choose an NFT Project'\r\n                options={supportedNFTProjects}\r\n              />\r\n            </Grid>\r\n            <Grid xs={12} item>\r\n              <Typography\r\n                align='right'\r\n                sx={{\r\n                  color: 'blue',\r\n                  fontSize: '14px',\r\n                  cursor: 'pointer',\r\n                }}\r\n                onClick={handleOpen}\r\n              >\r\n                suggest an NFT project\r\n              </Typography>\r\n            </Grid>\r\n            <ModalSugProject open={open} onClose={handleClose} />\r\n            <Grid item xs={12}>\r\n              <TextFieldFormik\r\n                name='nftTokenId'\r\n                label='NFT/Token number you own'\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextFieldFormik\r\n                name='message'\r\n                label='on-chain message (200 chars max, optional).'\r\n                multiline={true}\r\n                rows={5}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextFieldFormik\r\n                name='attrKeyword'\r\n                label='on-chain keyword (20 chars max, optional).'\r\n              />\r\n            </Grid>\r\n\r\n            <Grid item xs={12}>\r\n              <ButtonFormik>Generate Image Preview</ButtonFormik>\r\n            </Grid>\r\n            {!auth.provider.selectedAddress && (\r\n              <Grid xs={12} item>\r\n                <Typography\r\n                  align='center'\r\n                  sx={{\r\n                    color: 'blue',\r\n                    fontSize: '14px',\r\n                    cursor: 'pointer',\r\n                  }}\r\n                  onClick={auth.checkWalletIsConnected}\r\n                >\r\n                  connect wallet to preview\r\n                </Typography>\r\n              </Grid>\r\n            )}\r\n          </Grid>\r\n        </Form>\r\n      </Formik>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default SendFormik;\r\n","import * as React from 'react';\r\nimport Alert from '@mui/material/Alert';\r\nimport AlertTitle from '@mui/material/AlertTitle';\r\nimport Stack from '@mui/material/Stack';\r\nimport { Button } from '@mui/material';\r\n\r\nimport theme from '../../../Styles';\r\n\r\nexport default function AlertBuilderToken(props) {\r\n  return (\r\n    <Stack sx={{ cursor: 'pointer', width: '100%' }} spacing={2}>\r\n      <Alert onClick={() => props.modalControl()} severity='warning'>\r\n        <AlertTitle sx={{ fontWeight: 'bold' }}>\r\n          You must own at least 1 Builder Token to mint a record.\r\n        </AlertTitle>\r\n        Owning a Builder Token NFT grants access to all Public Record services.{' '}\r\n        <Button sx={{ ml: theme.spacing(3) }} variant='contained'>\r\n          Get a Builder Token\r\n        </Button>\r\n      </Alert>\r\n    </Stack>\r\n  );\r\n}\r\n","import { useEffect } from 'react';\r\n\r\n\r\nexport default function ScrollToTop() {\r\n\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, []);\r\n\r\n  return null;\r\n}\r\n","import * as React from 'react';\r\nimport { useContext, useState } from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport Modal from '@mui/material/Modal';\r\nimport Button from '@mui/material/Button';\r\nimport Typography from '@mui/material/Typography';\r\nimport Grid from '@mui/material/Grid';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport Web3 from 'web3';\r\n\r\nimport TextFieldFormik from '../../../components/form/formik/components/TextField';\r\nimport ButtonFormik from '../../../components/form/formik/components/ButtonFormik';\r\nimport { AuthContext } from '../../context/auth-context';\r\nimport BuilderTokensBuild from '../../../assets/contracts/BuilderTokens.json';\r\n\r\nimport Checkbox from '../../../components/form/formik/components/Checkbox';\r\nimport ScrollToTop from '../util/ScrollToTop';\r\n\r\nimport theme from '../../../Styles';\r\n\r\nconst style = {\r\n  position: 'absolute',\r\n  top: '50%',\r\n  left: '50%',\r\n  transform: 'translate(-50%, -50%)',\r\n  width: 400,\r\n  bgcolor: 'background.paper',\r\n  border: '2px solid #000',\r\n  boxShadow: 24,\r\n  pt: 2,\r\n  px: 4,\r\n  pb: 3,\r\n  borderRadius: '6px',\r\n  overflow: 'scroll',\r\n};\r\n\r\nconst INITIAL_FORM_STATE = {\r\n  emailFrom: '',\r\n  firstName: '',\r\n  lastName: '',\r\n  email: '',\r\n  message: '',\r\n  includeRecord: false,\r\n};\r\n\r\nconst FORM_VALIDATION_SCHEMA = Yup.object().shape({\r\n  tokenCount: Yup.number().required('Minimum token purchase is 1.'),\r\n});\r\n\r\nfunction ChildModal(props) {\r\n  return (\r\n    <React.Fragment>\r\n      <Modal\r\n        hideBackdrop\r\n        {...props}\r\n        aria-labelledby='child-modal-title'\r\n        aria-describedby='child-modal-description'\r\n      >\r\n        <Box sx={{ ...style, width: 400 }}>\r\n          <h2 id='child-modal-title'>Why Polygon?</h2>\r\n          <p id='child-modal-description'></p>\r\n          <ul>\r\n            <li>Polygon is a popular Ethereum Layer2 solution.</li>\r\n            <li>Polygon operates exactly like Ethereum.</li>\r\n            <li>Gas fees are pennies per transaction.</li>\r\n            <li>Low gas fees means we can build more useful services.</li>\r\n            <li>Polygon NFTs are traded on Opensea and elsewhere.</li>\r\n            <li>\r\n              Added level of security for your Ethereum NFT's because all\r\n              transactions are conducted on Polygon network.\r\n            </li>\r\n          </ul>\r\n\r\n          <Box textAlign='center'>\r\n            <Button variant='contained' onClick={props.onClose}>\r\n              Close\r\n            </Button>\r\n          </Box>\r\n        </Box>\r\n      </Modal>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default function ModalEmailNested({ record, loading, receipt, owner, ...props }) {\r\n  const auth = useContext(AuthContext);\r\n  const [open, setOpen] = useState(false);\r\n  const [trxSuccess, setTrxSuccess] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n\r\n  ScrollToTop();\r\n\r\n  console.log('modal chain id:', auth.chainId);\r\n console.log('loading:', loading)\r\n console.log('receipt :', receipt)\r\n console.log('record:', record)\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n\r\n  const chainIdHandler = () => {\r\n    auth.detect();\r\n  };\r\n\r\n  const onSubmitHandler = async (event) => {\r\n    setIsLoading(true);\r\n    setTrxSuccess(false);\r\n    setError('');\r\n    const web3 = new Web3(auth.provider);\r\n    const networkId = await web3.eth.net.getId();\r\n\r\n    const iconMint = new web3.eth.Contract(\r\n      BuilderTokensBuild.abi,\r\n      BuilderTokensBuild.networks[networkId].address\r\n    );\r\n\r\n\r\n\r\n    const value = event.tokenCount * 6;\r\n\r\n    const payment = web3.utils.toWei(value.toString(), 'ether');\r\n\r\n    try {\r\n      await iconMint.methods\r\n        .mint(event.tokenCount)\r\n        .send({\r\n          from: auth.provider.selectedAddress,\r\n          value: payment,\r\n        })\r\n\r\n        .then(function (receipt) {\r\n          setIsLoading(false);\r\n          setTrxSuccess(true);\r\n          owner(true);\r\n          console.log(receipt);\r\n        });\r\n    } catch (err) {\r\n      console.log(err.message);\r\n      setIsLoading(false);\r\n      setError(err.message);\r\n    }\r\n\r\n    event.quantity = '';\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Modal\r\n        {...props}\r\n        aria-labelledby='parent-modal-title'\r\n        aria-describedby='parent-modal-description'\r\n      >\r\n        <Box sx={{ ...style, width: 600 }}>\r\n          <h2 id='parent-modal-title'>While your mint is pending...</h2>\r\n          <p id='parent-modal-description'></p>\r\n\r\n          <Formik\r\n            initialValues={{ ...INITIAL_FORM_STATE }}\r\n            validationSchema={FORM_VALIDATION_SCHEMA}\r\n            onSubmit={onSubmitHandler}\r\n          >\r\n            <Form>\r\n              <Grid container spacing={2}>\r\n                <Grid item xs={12}>\r\n                  <Typography>\r\n                    Send an email as the verified owner of {record.nftTokenType} #\r\n                    {record.nftTokenId}\r\n                  </Typography>\r\n                </Grid>\r\n\r\n                <Grid item xs={12}>\r\n                  <TextFieldFormik\r\n                    name='emailfrom'\r\n                    label={`ex: ${record.nftTokenType}#${record.nftTokenId}@visible.love`}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                  <TextFieldFormik name='firstName' label='First Name (optional)' />\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                  <TextFieldFormik name='lastName' label='Last Name (optional)' />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <TextFieldFormik name='emailReply' label='your reply email address (optional)' />\r\n                </Grid>\r\n                <Grid xs={12} item>\r\n                  <Checkbox\r\n                  name='includeRecord'\r\n                  legend={`Include your NFT's new Public Record?`}\r\n                  label='include record'\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <TextFieldFormik\r\n                    name='message'\r\n                    label='Message (optional)'\r\n                    multiline={true}\r\n                    rows={6}\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid item xs={12}>\r\n                  <ButtonFormik>Submit Mail</ButtonFormik>\r\n                </Grid>\r\n              </Grid>\r\n            </Form>\r\n          </Formik>\r\n          <ChildModal open={open} onClose={handleClose} />\r\n          <Box\r\n            display='flex'\r\n            justifyContent='space-between'\r\n            marginTop={theme.spacing(50)}\r\n          >\r\n            <Button\r\n              onClick={props.onClose}\r\n              sx={{\r\n                cursor: 'pointer',\r\n              }}\r\n            >\r\n              Close\r\n            </Button>\r\n          </Box>\r\n        </Box>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","import * as React from 'react';\r\nimport { useState, useContext, useEffect } from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport Grid from '@mui/material/Grid';\r\nimport Box from '@mui/material/Box';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nimport TextFieldFormik from '../../../components/form/formik/components/TextField';\r\nimport ButtonFormik from '../../../components/form/formik/components/ButtonFormik';\r\nimport { AuthContext } from '../../context/auth-context';\r\nimport LoadingSpinner from './LoadingSpinner';\r\nimport ScrollToTop from '../util/ScrollToTop';\r\nimport { useHttpClient } from '../../hooks/http-hook';\r\n\r\nimport theme from '../../../Styles';\r\nimport { Typography } from '@mui/material';\r\n\r\nconst INITIAL_FORM_STATE = {\r\n  emailFrom: '',\r\n  emailTo: '',\r\n  subject: '',\r\n  // emailReply: '',\r\n  // message: '',\r\n};\r\n\r\nconst FORM_VALIDATION_SCHEMA = Yup.object().shape({\r\n  emailFrom: Yup.string().required(\r\n    'An email address of your choosing is required.'\r\n  ),\r\n  emailTo: Yup.string()\r\n    .email('Email format is not valid.')\r\n    .required('A mail to address is required.'),\r\n\r\n  // emailReply: Yup.string().email('Email format is not valid.'),\r\n  subject: Yup.string().max(\r\n    100,\r\n    'Please keep subject line to less than 100 characters.'\r\n  ),\r\n  // message: Yup.string().max(\r\n  //   1000,\r\n  //   'Please keep your message to less than 1000 characters.'\r\n  // ),\r\n});\r\n\r\nexport default function DialogEmailTrx({\r\n  err,\r\n  record,\r\n  receipt,\r\n  owner,\r\n  mintedObject,\r\n  ...props\r\n}) {\r\n  const auth = useContext(AuthContext);\r\n  const [open, setOpen] = useState(false);\r\n  const [scroll, setScroll] = useState('body');\r\n  const [timer, setTimer] = useState(false);\r\n  const [response, setResponse] = useState('');\r\n  const [emailSent, setEmailSent] = useState('');\r\n\r\n  ScrollToTop();\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      setTimer(true);\r\n    }, 600000);\r\n  }, []);\r\n\r\n  const descriptionElementRef = React.useRef(null);\r\n  React.useEffect(() => {\r\n    if (open) {\r\n      const { current: descriptionElement } = descriptionElementRef;\r\n      if (descriptionElement !== null) {\r\n        descriptionElement.focus();\r\n      }\r\n    }\r\n  }, [open]);\r\n\r\n  const { sendRequest, isLoading, error, clearError } = useHttpClient();\r\n\r\n  const onSubmitHandler = async (event) => {\r\n    auth.detect();\r\n    console.log('record at send email dialog:', mintedObject);\r\n    try {\r\n      const response = await sendRequest(\r\n        `${process.env.REACT_APP_BACKEND_URL}/users/sendMail`,\r\n        'POST',\r\n        JSON.stringify({\r\n          emailFrom: event.emailFrom,\r\n          emailTo: event.emailTo,\r\n          emailReply: event.emailReply,\r\n          subject: event.subject,\r\n          message: event.message,\r\n          attrNFTName: mintedObject.attrNFTName,\r\n          nftTokenType: mintedObject.nftTokenType,\r\n          nftTokenId: mintedObject.nftTokenId,\r\n          dna: mintedObject.dna,\r\n\r\n          userAddress: auth.currentAccount,\r\n\r\n          image: mintedObject.image,\r\n        }),\r\n        {\r\n          'Content-Type': 'application/json',\r\n        }\r\n      );\r\n\r\n      setResponse(response);\r\n      setEmailSent(true);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        {...props}\r\n        open={props.open}\r\n        onClose={props.onClose}\r\n        scroll={scroll}\r\n        aria-labelledby='scroll-dialog-title'\r\n        aria-describedby='scroll-dialog-description'\r\n      >\r\n        <Box sx={{width: '500px'}}>\r\n          <DialogTitle xs={6} id='scroll-dialog-title'>\r\n            Your mint is pending...\r\n          </DialogTitle>\r\n\r\n          {timer === true && !err && !receipt && (\r\n            <Box\r\n              sx={{\r\n                ml: theme.spacing(3),\r\n                mt: theme.spacing(1),\r\n                color: 'green',\r\n              }}\r\n            >\r\n              Timeout. This may be do to a network issue. If you have\r\n              successfully minted a record, our system will automatically\r\n              publish it. No further action required.\r\n            </Box>\r\n          )}\r\n          {receipt && (\r\n            <Box\r\n              sx={{\r\n                ml: theme.spacing(3),\r\n                mt: theme.spacing(1),\r\n                color: 'green',\r\n              }}\r\n            >\r\n              Success! {record.nftTokenType} #{record.nftTokenId}'s new record\r\n              is on-chain and unalterable.\r\n            </Box>\r\n          )}\r\n          {err && (\r\n            <Box\r\n              sx={{\r\n                mr: theme.spacing(3),\r\n                ml: theme.spacing(3),\r\n                mt: theme.spacing(1),\r\n                color: 'red',\r\n              }}\r\n            >\r\n              Error: {err.message}\r\n            </Box>\r\n          )}\r\n          {!receipt && timer === false && !err && (\r\n            <Box\r\n              sx={{ mt: theme.spacing(2), pb: theme.spacing(2) }}\r\n              xs={12}\r\n              textAlign='center'\r\n            >\r\n              <LoadingSpinner />\r\n              <Typography sx={{mt: theme.spacing(3), padding: theme.spacing(2)}}>We recommend using 'aggressive' gas fees in Metamask and keeping this dialog box open until you receive a 'success' message.</Typography>\r\n            </Box>\r\n          )}\r\n          <DialogActions>\r\n            <Button onClick={props.onClose}>Close</Button>\r\n          </DialogActions>\r\n          {/* <DialogContent dividers={scroll === 'paper'}>\r\n          {!err && !receipt && !response && (\r\n            <DialogContentText\r\n              id='scroll-dialog-description'\r\n              ref={descriptionElementRef}\r\n              tabIndex={-1}\r\n              sx={{ mb: theme.spacing(4) }}\r\n            >\r\n              Send an email from{' '}\r\n              {record.attrNFTName.substring(0, record.attrNFTName.length - 13)}{' '}\r\n              while you wait.\r\n            </DialogContentText>\r\n          )}\r\n          {receipt && !response && (\r\n            <DialogContentText\r\n              id='scroll-dialog-description'\r\n              ref={descriptionElementRef}\r\n              tabIndex={-1}\r\n              sx={{ mb: theme.spacing(4) }}\r\n            >\r\n              Send an email from{' '}\r\n              {record.attrNFTName.substring(0, record.attrNFTName.length - 13)}{' '}\r\n              now.\r\n            </DialogContentText>\r\n          )}\r\n          <Formik\r\n            initialValues={{ ...INITIAL_FORM_STATE }}\r\n            validationSchema={FORM_VALIDATION_SCHEMA}\r\n            onSubmit={onSubmitHandler}\r\n          >\r\n            <Form>\r\n              <Grid container spacing={2}>\r\n                {!response && !error && (\r\n                  <React.Fragment>\r\n                    <Grid item xs={6}>\r\n                      <Box sx={{ fontSize: '12px' }}>email address from</Box>\r\n                      <TextFieldFormik\r\n                        name='emailFrom'\r\n                        label={`ex:  ${record.nftTokenType}${record.nftTokenId}`}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                      <Box\r\n                        sx={{ color: '#808080', pt: '43px', fontSize: {xs: \"16px\", md: \"34px\"}, }}\r\n                      >\r\n                        @publicrecord.cc\r\n                      </Box>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                      <Box sx={{ fontSize: '12px' }}>email address to</Box>\r\n                      <TextFieldFormik name='emailTo' label={`recipient`} />\r\n                    </Grid>\r\n\r\n                    {/* <Grid item xs={12}>\r\n                      <Box sx={{ fontSize: '12px' }}>email address reply</Box>\r\n                      <TextFieldFormik\r\n                        name='emailReply'\r\n                        label='Your real email address (optional)'\r\n                      />\r\n                    </Grid> */}\r\n\r\n          {/* <Grid item xs={12}>\r\n                      <TextFieldFormik\r\n                        name='subject'\r\n                        label='Subject (optional)'\r\n                      />\r\n                    </Grid> */}\r\n          {/*\r\n                    <Grid item xs={12}>\r\n                      <TextFieldFormik\r\n                        name='message'\r\n                        label='Message (optional)'\r\n                        multiline={true}\r\n                        rows={8}\r\n                      />\r\n                    </Grid> */}\r\n          {/* </React.Fragment>\r\n                )}\r\n                {isLoading && (\r\n                  <Grid>\r\n                    <LoadingSpinner />\r\n                  </Grid>\r\n                )}\r\n                {response && (\r\n                  <Grid sx={{ width: '600px' }} item>\r\n                    <Typography>{response.msg}</Typography>\r\n                  </Grid>\r\n                )}\r\n              </Grid> */}\r\n          {/* {!err && (\r\n                <Grid item xs={12}>\r\n                  <Box\r\n                    sx={{\r\n                      color: 'blue', fontSize: '16px'\r\n                    }}\r\n                  >\r\n                    {record.nftTokenType} {record.nftTokenId}'s new public\r\n                    record will be included in the email body.\r\n                  </Box>\r\n                </Grid>\r\n              )}\r\n              <DialogActions>\r\n                {!response && !err && (\r\n                  <React.Fragment>\r\n                    <Button onClick={props.onClose}>Close</Button>\r\n                    <ButtonFormik\r\n                      err={err ? true : false}\r\n                      email\r\n                      onClick={onSubmitHandler}\r\n                      response={response ? true : false}\r\n                      emailSent={emailSent ? true : false}\r\n                    >\r\n                      Send\r\n                    </ButtonFormik>\r\n                  </React.Fragment>\r\n                )}\r\n                {response && <Button onClick={props.onClose}>Close</Button>}\r\n                {err && !response && (\r\n                  <Button onClick={props.onClose}>Close</Button>\r\n                )}\r\n              </DialogActions>\r\n            </Form>\r\n          </Formik> */}\r\n          {/* </DialogContent> */}\r\n        </Box>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","import * as React from 'react';\r\nimport { useContext, useState } from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport Modal from '@mui/material/Modal';\r\nimport Button from '@mui/material/Button';\r\nimport Typography from '@mui/material/Typography';\r\nimport Grid from '@mui/material/Grid';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport Web3 from 'web3';\r\n\r\nimport TextFieldFormik from '../../../components/form/formik/components/TextField';\r\nimport ButtonModalBTBuy from '../../../components/form/formik/components/ButtonModalBTBuy';\r\nimport { AuthContext } from '../../../shared/context/auth-context';\r\nimport BuilderTokensBuild from '../../../assets/contracts/BuilderTokens.json';\r\nimport LoadingSpinner from '../../../shared/components/UIElements/LoadingSpinner';\r\n\r\nimport theme from '../../../Styles';\r\n\r\nconst style = {\r\n  position: 'absolute',\r\n  top: '50%',\r\n  left: '50%',\r\n  transform: 'translate(-50%, -50%)',\r\n  width: 400,\r\n  bgcolor: 'background.paper',\r\n  border: '2px solid #000',\r\n  boxShadow: 24,\r\n  pt: 2,\r\n  px: 4,\r\n  pb: 3,\r\n  borderRadius: '6px',\r\n};\r\n\r\nconst INITIAL_FORM_STATE = {\r\n  tokenCount: '',\r\n};\r\n\r\nconst FORM_VALIDATION_SCHEMA = Yup.object().shape({\r\n  tokenCount: Yup.number().required('Minimum token purchase is 1.'),\r\n});\r\n\r\nfunction ChildModal(props) {\r\n  return (\r\n    <React.Fragment>\r\n      <Modal\r\n        hideBackdrop\r\n        {...props}\r\n        aria-labelledby='child-modal-title'\r\n        aria-describedby='child-modal-description'\r\n      >\r\n        <Box sx={{ ...style, width: 400 }}>\r\n          <h2 id='child-modal-title'>Why Polygon?</h2>\r\n          <p id='child-modal-description'></p>\r\n          <ul>\r\n            <li>Polygon is a popular Ethereum Layer2 solution.</li>\r\n            <li>Polygon operates exactly like Ethereum.</li>\r\n            <li>Gas fees are pennies per transaction.</li>\r\n            <li>Low gas fees means we can build more useful services.</li>\r\n            <li>Polygon NFTs are traded on Opensea and elsewhere.</li>\r\n          </ul>\r\n\r\n          <Box textAlign='center'>\r\n            <Button variant='contained' onClick={props.onClose}>\r\n              Close\r\n            </Button>\r\n          </Box>\r\n        </Box>\r\n      </Modal>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default function NestedModal({ owner, ...props }) {\r\n  const auth = useContext(AuthContext);\r\n  const [open, setOpen] = useState(false);\r\n  const [trxSuccess, setTrxSuccess] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const chainIdHandler = () => {\r\n    auth.detect();\r\n  };\r\n\r\n  const onSubmitHandler = async (event) => {\r\n    setIsLoading(true);\r\n    const web3 = new Web3(auth.provider);\r\n    const networkId = await web3.eth.net.getId();\r\n    const iconMint = new web3.eth.Contract(\r\n      BuilderTokensBuild.abi,\r\n      BuilderTokensBuild.networks[networkId].address\r\n    );\r\n\r\n\r\n    const value = event.tokenCount * 60;\r\n    const payment = web3.utils.toWei(value.toString(), 'ether');\r\n\r\n    try {\r\n      await iconMint.methods\r\n        .mint(event.tokenCount)\r\n        .send({\r\n          from: auth.provider.selectedAddress,\r\n          value: payment,\r\n        })\r\n        .then(function (receipt) {\r\n          setIsLoading(false);\r\n          setTrxSuccess(true);\r\n          owner(true);\r\n        });\r\n    } catch (err) {\r\n      console.log(err.message);\r\n      setIsLoading(false);\r\n      setError(err.message);\r\n    }\r\n\r\n    event.quantity = '';\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Modal\r\n        {...props}\r\n        aria-labelledby='parent-modal-title'\r\n        aria-describedby='parent-modal-description'\r\n      >\r\n        <Box sx={{ ...style, width: 600 }}>\r\n          <h2 id='parent-modal-title'>Visible builds services for NFT owners</h2>\r\n          <p id='parent-modal-description'>\r\n            Owning a Builder Token NFT grants:\r\n          </p>\r\n          <ul>\r\n            <li>access to all services</li>\r\n            <li>services for any NFT in the same wallet</li>\r\n            <li>services are available for both Ethereum and Polygon NFTs</li>\r\n          </ul>\r\n\r\n          <Formik\r\n            initialValues={{ ...INITIAL_FORM_STATE }}\r\n            initialTouched={{\r\n              field: true,\r\n            }}\r\n            validateOnMount\r\n            validationSchema={FORM_VALIDATION_SCHEMA}\r\n            onSubmit={onSubmitHandler}\r\n          >\r\n            <Form>\r\n              <Grid container>\r\n                <Grid xs={12} item>\r\n                  <TextFieldFormik\r\n                    name='tokenCount'\r\n                    label='Cost 60 Matic per token'\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid xs={3} item>\r\n                  {/* todo switch disable check to id 137 main polygon */}\r\n                  <ButtonModalBTBuy\r\n                    disabled={auth.chainId === 137 ? false : true}\r\n                    sx={{ mt: theme.spacing(2) }}\r\n                  >\r\n                    Submit\r\n                  </ButtonModalBTBuy>\r\n                </Grid>\r\n\r\n                {isLoading && (\r\n                  <Grid\r\n                    sx={{ ml: theme.spacing(3), mt: theme.spacing(1) }}\r\n                    item\r\n                  >\r\n                    <LoadingSpinner />\r\n                  </Grid>\r\n                )}\r\n\r\n                {error && (\r\n                  <Grid\r\n                    xs={12}\r\n                    sx={{\r\n                      paddingTop: theme.spacing(2),\r\n                    }}\r\n                    item\r\n                  >\r\n                    <Typography variant='h7' sx={{ color: 'red' }}>\r\n                      {error}\r\n                    </Typography>\r\n                  </Grid>\r\n                )}\r\n                {/* todo switch chain id to 137 polygon mainnet */}\r\n                {auth.chainId !== 137 && (\r\n                  <Grid\r\n                    xs={12}\r\n                    sx={{\r\n                      paddingTop: theme.spacing(2),\r\n                    }}\r\n                    item\r\n                  >\r\n                    <Typography variant='h7' sx={{ color: 'red' }}>\r\n                      Switch Metamask to Polygon Mainnet to complete\r\n                      transaction.\r\n                    </Typography>\r\n                    <Box\r\n\r\n                      sx={{\r\n                        fontSize: '14px',\r\n                        cursor: 'pointer',\r\n                        color: 'blue',\r\n                      }}\r\n                    >\r\n                      <ul>\r\n                        <li>Why Polygon?</li>\r\n                        <li>\r\n                          <a\r\n                            href='https://docs.polygon.technology/docs/develop/metamask/config-polygon-on-metamask/'\r\n                            target='blank'\r\n                          >\r\n                            Set up Metamask for Polygon\r\n                          </a>\r\n                        </li>\r\n                        <li>\r\n                          <a\r\n                            href='https://consensys.net/blog/metamask/how-to-bridge-tokens-from-ethereum-to-polygon-with-metamask/'\r\n                            target='blank'\r\n                          >\r\n                            Bridge Ethereum to Polygon\r\n                          </a>\r\n                        </li>\r\n                      </ul>\r\n                    </Box>\r\n                  </Grid>\r\n                )}\r\n                {trxSuccess && (\r\n                  <Grid\r\n                    xs={9}\r\n                    sx={{\r\n                      pt: theme.spacing(3),\r\n                      pl: theme.spacing(3),\r\n                    }}\r\n                    item\r\n                  >\r\n                    <Typography sx={{ fontSize: '18px', color: 'green' }}>\r\n                      Success! Builder Token minted.\r\n                    </Typography>\r\n                  </Grid>\r\n                )}\r\n              </Grid>\r\n            </Form>\r\n          </Formik>\r\n          <ChildModal open={open} onClose={handleClose} />\r\n          <Box\r\n            display='flex'\r\n            justifyContent='flex-end'\r\n            marginTop={theme.spacing(10)}\r\n          >\r\n            <Button\r\n              onClick={props.onClose}\r\n              sx={{\r\n                cursor: 'pointer',\r\n              }}\r\n\r\n            >\r\n              Close\r\n            </Button>\r\n          </Box>\r\n        </Box>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","import * as React from 'react';\r\nimport Alert from '@mui/material/Alert';\r\nimport AlertTitle from '@mui/material/AlertTitle';\r\nimport Stack from '@mui/material/Stack';\r\n\r\nexport default function AlertConnectPolygon(props) {\r\n  return (\r\n    <Stack sx={{ cursor: 'pointer', width: '100%' }} spacing={2}>\r\n      <Alert severity='warning'>\r\n        <AlertTitle sx={{ fontWeight: 'bold' }}>\r\n          Change Metamask network to Polygon Network to continue.\r\n        </AlertTitle>\r\n      </Alert>\r\n    </Stack>\r\n  );\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { CSSTransition } from 'react-transition-group';\n\nimport Backdrop from './Backdrop';\nimport './Modal.css';\n\nconst ModalOverlay = props => {\n  const content = (\n    <div className={`modal ${props.className}`} style={props.style}>\n      <header className={`modal__header ${props.headerClass}`}>\n        <h2>{props.header}</h2>\n      </header>\n      <form\n        onSubmit={\n          props.onSubmit ? props.onSubmit : event => event.preventDefault()\n        }\n      >\n        <div className={`modal__content ${props.contentClass}`}>\n          {props.children}\n        </div>\n        <footer className={`modal__footer ${props.footerClass}`}>\n          {props.footer}\n        </footer>\n      </form>\n    </div>\n  );\n  return ReactDOM.createPortal(content, document.getElementById('modal-hook'));\n};\n\nconst Modal = props => {\n  return (\n    <React.Fragment>\n      {props.show && <Backdrop onClick={props.onCancel} />}\n      <CSSTransition\n        in={props.show}\n        mountOnEnter\n        unmountOnExit\n        timeout={200}\n        classNames=\"modal\"\n      >\n        <ModalOverlay {...props} />\n      </CSSTransition>\n    </React.Fragment>\n  );\n};\n\nexport default Modal;\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './Button.css';\r\n\r\nconst Button = props => {\r\n  if (props.href) {\r\n    return (\r\n      <a\r\n        className={`button button--${props.size || 'default'} ${props.inverse &&\r\n          'button--inverse'} ${props.danger && 'button--danger'}`}\r\n        href={props.href}\r\n      >\r\n        {props.children}\r\n      </a>\r\n    );\r\n  }\r\n  if (props.to) {\r\n    return (\r\n      <Link\r\n        to={props.to}\r\n        exact={props.exact}\r\n        className={`button button--${props.size || 'default'} ${props.inverse &&\r\n          'button--inverse'} ${props.danger && 'button--danger'}`}\r\n      >\r\n        {props.children}\r\n      </Link>\r\n    );\r\n  }\r\n  return (\r\n    <button\r\n      className={`button button--${props.size || 'default'} ${props.inverse &&\r\n        'button--inverse'} ${props.danger && 'button--danger'}`}\r\n      type={props.type}\r\n      onClick={props.onClick}\r\n      disabled={props.disabled}\r\n    >\r\n      {props.children}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React from 'react';\n\nimport Modal from './Modal';\nimport Button from '../FormElements/Button';\n\nconst ErrorModal = props => {\n  return (\n    <Modal\n      onCancel={props.onClear}\n      header=\"An Error Occurred!\"\n      show={!!props.error}\n      footer={<Button onClick={props.onClear}>Okay</Button>}\n    >\n      <p>{props.error} Please Try Again.</p>\n    </Modal>\n  );\n};\n\nexport default ErrorModal;\n","import React, { useContext, useState, useEffect } from 'react';\r\nimport Web3 from 'web3';\r\nimport { Grid, Button, Box, Container, Alert } from '@mui/material';\r\nimport { makeStyles } from '@mui/styles';\r\nimport SVG from 'react-inlinesvg';\r\n\r\nimport { AuthContext } from '../shared/context/auth-context';\r\nimport PublicRecordBuild from '../assets/contracts/VisibleModes.json';\r\nimport LoadingSpinner from '../shared/components/UIElements/LoadingSpinner';\r\nimport { useHttpClient } from '../shared/hooks/http-hook';\r\nimport BuilderTokenAlert from '../components/navigation/alerts/AlertBuilderToken';\r\nimport ScrollToTop from '../shared/components/util/ScrollToTop';\r\nimport ModalEmailNested from '../shared/components/UIElements/ModalEmailNested';\r\nimport DialogEmailTrx from '../shared/components/UIElements/DialogEmailTrx';\r\nimport ModalBTBuyNested from '../shared/components/UIElements/ModalBTBuyNested';\r\nimport AlertConnectPolygon from '../components/navigation/alerts/AlertConnectPolygon';\r\nimport ErrorModal from '../shared/components/UIElements/ErrorModal';\r\n\r\nimport theme from '../Styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingTop: theme.spacing(2),\r\n    paddingBottom: theme.spacing(8),\r\n  },\r\n  record: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    minHeight: '100vh',\r\n\r\n  },\r\n  img: {\r\n    width: '100%',\r\n    height: '100%',\r\n    borderRadius: 6,\r\n    boxShadow: '0 0 5px #999999',\r\n  },\r\n}));\r\n\r\nconst MintRecord = ({ record }) => {\r\n  const auth = useContext(AuthContext);\r\n  const [mrrReceipt, setMrrReceipt] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [err, setErr] = useState('');\r\n  const [tokenOwner, setTokenOwner] = useState(false);\r\n  const [openEmailModal, setOpenEmailModal] = useState(false);\r\n  const [alertNoToken, setAlertNoToken] = useState(false);\r\n  const [openBTTokenModal, setOpenBTTokenModal] = useState(false);\r\n  const [responseMintObject, setResponseMintObject] = useState('');\r\n\r\n  console.log('mode array:', record.modeArray);\r\n\r\n  const classes = useStyles();\r\n\r\n  ScrollToTop();\r\n\r\n  const handleOwner = (bool) => {\r\n    setTokenOwner(bool);\r\n  };\r\n\r\n  const handleCloseToken = () => {\r\n    setOpenBTTokenModal(false);\r\n  };\r\n\r\n  const handleOpenToken = () => {\r\n    setOpenBTTokenModal(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpenEmailModal(false);\r\n    setErr('');\r\n    setResponseMintObject('');\r\n    setMrrReceipt('');\r\n  };\r\n\r\n  const { sendRequest, error, clearError } = useHttpClient();\r\n\r\n  console.log('auth.bttokencheck:', auth.BTTokenCheck);\r\n  console.log('alert no token:', alertNoToken);\r\n  console.log('tokenOwner:', tokenOwner);\r\n\r\n  useEffect(() => {\r\n    if (tokenOwner === false && auth.BTTokenCheck === false) {\r\n      setAlertNoToken(true);\r\n    } else {\r\n      setAlertNoToken(false);\r\n    }\r\n  }, [auth.BTTokenCheck, tokenOwner]);\r\n\r\n  const onSubmitMintRecord = (mode) => async (event) => {\r\n    setIsLoading(true);\r\n    auth.detect();\r\n    const modeDNA = mode.DNA;\r\n    const modeName = mode.modeName;\r\n    const web3 = new Web3(auth.provider);\r\n    const networkId = await web3.eth.net.getId();\r\n    const PubMint = new web3.eth.Contract(\r\n      PublicRecordBuild.abi,\r\n      PublicRecordBuild.networks[networkId].address\r\n    );\r\n    const value = 6;\r\n    const payment = web3.utils.toWei(value.toString(), 'ether');\r\n\r\n    // mint record\r\n    sendRequest(\r\n      `${process.env.REACT_APP_BACKEND_URL}/users/mrrQueue`,\r\n      'POST',\r\n      JSON.stringify({ modeDNA, modeName, user: auth.currentAccount }),\r\n      {\r\n        'Content-Type': 'application/json',\r\n      }\r\n    )\r\n      .then((responseMintObject) => {\r\n        //open pending mint and send email dialog\r\n        setTimeout(() => {\r\n          setOpenEmailModal(true);\r\n        }, 4000);\r\n        setResponseMintObject(responseMintObject);\r\n        return PubMint.methods\r\n          .safeMint(\r\n            responseMintObject.name,\r\n            responseMintObject.description,\r\n            'ipfs://' + responseMintObject.image,\r\n            responseMintObject.message,\r\n            responseMintObject.prCreateDate,\r\n            responseMintObject.attrNFTName,\r\n            responseMintObject.attrKeyword,\r\n            responseMintObject.mode,\r\n            auth.provider.selectedAddress,\r\n            responseMintObject.dna\r\n          )\r\n          .send({\r\n            from: auth.provider.selectedAddress,\r\n            value: payment,\r\n          });\r\n      })\r\n      .then((trx) => {\r\n        console.log(trx);\r\n        return sendRequest(\r\n          `${process.env.REACT_APP_BACKEND_URL}/users/initMrr`,\r\n          'POST',\r\n          JSON.stringify({ trx }),\r\n          {\r\n            'Content-Type': 'application/json',\r\n          }\r\n        );\r\n      })\r\n      .then((response) => {\r\n        console.log(response);\r\n        setMrrReceipt(response);\r\n        setIsLoading(false);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        setIsLoading(false);\r\n        setErr(err);\r\n      });\r\n  };\r\n\r\n  if (error) {\r\n    return <ErrorModal error={err.message} onClear={clearError} />;\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {alertNoToken && (\r\n        <BuilderTokenAlert modalControl={handleOpenToken} owner={handleOwner} />\r\n      )}\r\n      {auth.chainId === 1 && !alertNoToken && <AlertConnectPolygon />}\r\n      <Container className={classes.root}>\r\n        <Grid container>\r\n          {record.modeArray.map((mode) => (\r\n            <Grid key={mode.modeName} className={classes.record} item xs={12}>\r\n              <Grid sx={{ mt: theme.spacing(8) }} xs={12} md={6} item>\r\n                <SVG\r\n                  src={mode.svg}\r\n                  className={classes.img}\r\n                  alt='NFT Public Record'\r\n                  title={mode.modeName}\r\n                  uniquifyIDs={true}\r\n                />\r\n                {/* <div>{mode.svg}</div> */}\r\n\r\n                {/* <object data={mode.svg} type='image/svg+xml'/> */}\r\n                <Box\r\n                  sx={{ mt: theme.spacing(1), mb: theme.spacing(18) }}\r\n                  textAlign='center'\r\n                >\r\n                  <Button\r\n                    onClick={onSubmitMintRecord(mode)}\r\n                    variant='contained'\r\n                    size='large'\r\n                    fullWidth\r\n                    disabled={\r\n                      (tokenOwner === false && auth.BTTokenCheck === false) ||\r\n                      auth.chainId === 1\r\n                    }\r\n                  >\r\n                    Mint Record\r\n                  </Button>\r\n                </Box>\r\n              </Grid>\r\n            </Grid>\r\n          ))}\r\n          <DialogEmailTrx\r\n            receipt={mrrReceipt}\r\n            open={openEmailModal}\r\n            onClose={handleClose}\r\n            record={record}\r\n            mintedObject={responseMintObject}\r\n            err={err}\r\n          />\r\n        </Grid>\r\n\r\n      </Container>\r\n      {/* <ModalBTBuyNested\r\n        owner={handleOwner}\r\n        open={openBTTokenModal}\r\n        onClose={handleCloseToken}\r\n      /> */}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default MintRecord;\r\n","import React, { useContext, useState } from 'react';\r\nimport { Typography, Grid, Container, Box } from '@mui/material';\r\nimport { makeStyles } from '@mui/styles';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport GenRecord from '../form/formik/GenRecord';\r\nimport { useHttpClient } from '../../shared/hooks/http-hook';\r\nimport MintRecord from '../../pages/MintRecord';\r\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\r\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\r\nimport { AuthContext } from '../../shared/context/auth-context';\r\n\r\nimport theme from '../../Styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    paddingTop: { md: theme.spacing(12), xs: theme.spacing(50) },\r\n    paddingBottom: theme.spacing(8),\r\n  },\r\n  loading: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    minHeight: '80vh',\r\n  },\r\n  body: {\r\n    paddingRight: theme.spacing(4),\r\n    paddingTop: theme.spacing(3),\r\n    paddingBottom: theme.spacing(3)\r\n  },\r\n  error: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    minHeight: '80vh',\r\n  },\r\n}));\r\n\r\nconst ValueProp = (props) => {\r\n  const auth = useContext(AuthContext);\r\n  const [response, setResponse] = useState({});\r\n  const classes = useStyles(props);\r\n\r\n  const { sendRequest, isLoading, error, clearError } = useHttpClient();\r\n\r\n  console.log('error:', error);\r\n\r\n  const onSubmitHandler = async (event) => {\r\n    auth.detect();\r\n    try {\r\n      const response = await sendRequest(\r\n        `${process.env.REACT_APP_BACKEND_URL}/users/initRecord`,\r\n        'POST',\r\n        JSON.stringify({\r\n          user: auth.provider.selectedAddress,\r\n          nftTokenType: event.nftTokenType,\r\n          nftTokenId: event.nftTokenId,\r\n          message: event.message,\r\n          attrKeyword: event.attrKeyword,\r\n          emailTo: event.emailTo,\r\n          emailReply: event.emailReply,\r\n        }),\r\n        {\r\n          'Content-Type': 'application/json',\r\n        }\r\n      );\r\n\r\n      setResponse(response);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <Grid container>\r\n        <Grid item xs={12}>\r\n          <Box className={classes.loading}>\r\n            <LoadingSpinner />\r\n          </Box>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return <ErrorModal error={error} onClear={clearError} />;\r\n  }\r\n\r\n  if (response.code === 201) {\r\n    return <MintRecord record={response} />;\r\n  }\r\n\r\n  return (\r\n    <Container  sx={{ pt: { md: theme.spacing(12), xs: theme.spacing(8) } }}>\r\n      <Grid container>\r\n        <Grid\r\n          item\r\n          sx={{ mb: { md: theme.spacing(10), xs: theme.spacing(1) } }}\r\n          xs={12}\r\n        >\r\n          <Typography\r\n            align='center'\r\n            variant='h1'\r\n            sx={{\r\n              pl: { md: theme.spacing(25) },\r\n              pr: {\r\n                md: theme.spacing(25),\r\n              },\r\n              fontSize: { md: '42px', xs: '32px' },\r\n            }}\r\n          >\r\n            <strong>Create a new mode for your NFT</strong>\r\n          </Typography>\r\n\r\n          <Box sx={{ fontSize: '14px' }} textAlign={'center'}>\r\n            artists get 50% revenue share: <Link to='/mode'>learn more</Link>\r\n          </Box>\r\n        </Grid>\r\n\r\n          <Grid\r\n            xs={12}\r\n            md={6}\r\n            order={{ xs: 2, sm: 2, md: 1 }}\r\n\r\n            sx={{\r\n              pt: theme.spacing(1),\r\n              pb: theme.spacing(4),\r\n              borderRadius: '6px',\r\n            }}\r\n            item\r\n          >\r\n            <Box textAlign='center'>\r\n              <Typography variant='h2'>How it works</Typography>\r\n              <Typography>\r\n                1. select an NFT project you own\r\n              </Typography>\r\n              <Typography sx={{ pt: theme.spacing(4) }}>\r\n                2. enter token number you own\r\n              </Typography>\r\n              <Typography sx={{ pt: theme.spacing(4) }}>\r\n                3. add a message or keyword to your mode\r\n              </Typography>\r\n              <Typography sx={{ pt: theme.spacing(4) }}>\r\n                4. generate a preview image\r\n              </Typography>\r\n            </Box>\r\n          </Grid>\r\n\r\n\r\n        <Grid\r\n          className={classes.body}\r\n          xs={12}\r\n          md={6}\r\n          order={{ xs: 1, sm: 1, md: 2 }}\r\n          item\r\n\r\n        >\r\n          <GenRecord onSubmit={onSubmitHandler} />\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ValueProp;\r\n","import React from 'react';\r\n\r\nimport BuilderMinter from '../components/form/formik/BuilderMinter';\r\nimport Accordion from '../components/content/usersPage/AccordionUsers';\r\nimport ValueProp from '../components/common/ValueProp';\r\n\r\n\r\nconst Main = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <ValueProp />\r\n      {/* <BuilderMinter /> */}\r\n      <Accordion />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport {Grid, Container } from '@mui/material';\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <Container sx={{ marginTop: 15, marginBottom: 3 }}>\r\n      <Grid container>\r\n        <Grid item xs={4}>\r\n          <a\r\n            style={{ textDecoration: 'none', color: '#212529' }}\r\n            href='https://twitter.com/VisibleNFT'\r\n            target='_blank'\r\n            rel='noreferrer'\r\n          >\r\n            Twitter\r\n          </a>\r\n        </Grid>\r\n        <Grid item xs={4}>\r\n          <a\r\n            style={{ textDecoration: 'none', color: '#212529' }}\r\n            href='mailto: modes@visible.love'\r\n            target='_blank'\r\n            rel='noreferrer'\r\n          >\r\n            modes@visible.love\r\n          </a>\r\n        </Grid>\r\n        <Grid item xs={4}>\r\n          <a\r\n            style={{ textDecoration: 'none', color: '#212529' }}\r\n            href='https://polygonscan.com/'\r\n            target='_blank'\r\n            rel='noreferrer'\r\n          >\r\n            Polygonscan\r\n          </a>\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","export default __webpack_public_path__ + \"static/media/diagrammodemaker.bd63616a.svg\";","export default __webpack_public_path__ + \"static/media/simpleRecord.b8aa8fe7.svg\";","import React from 'react';\r\nimport { Grid, Container, Typography, Box } from '@mui/material';\r\nimport SVG from 'react-inlinesvg';\r\n\r\nimport diagram from '../assets/images/diagrammodemaker.svg';\r\nimport simpleRecord from '../assets/images/simpleRecord.svg';\r\nimport doggo from '../assets/images/1x/verifiedOnwerDog.png';\r\n\r\n\r\nimport theme from '../Styles';\r\n\r\nconst ModeMaker = () => {\r\n  return (\r\n    <Container>\r\n      <Grid\r\n        direction='column'\r\n        alignItems='center'\r\n        justifyContent='center'\r\n        xs={12}\r\n        container\r\n      >\r\n        <Grid\r\n          xs={12}\r\n          sx={{ mt: { xs: theme.spacing(4), md: theme.spacing(16) } }}\r\n          item\r\n        >\r\n          <Typography sx={{ fontSize: '48px' }} variant='h1'>\r\n            <strong>NFT Modes</strong>\r\n          </Typography>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid\r\n        direction='row'\r\n        alignItems='center'\r\n        justifyContent='center'\r\n        xs={12}\r\n        sx={{ mt: theme.spacing(10), mb: theme.spacing(6) }}\r\n        container\r\n      >\r\n        <Grid xs={12} md={6} container>\r\n          <Grid xs={12} item>\r\n            <Typography variant='h4'>\r\n              <strong>Artists earn money</strong>\r\n            </Typography>\r\n            <Box>\r\n              <ul>\r\n                <li>earn 3 Matic each time a mode your created mints</li>\r\n                <li>Matic is Polygon blockchain currency</li>\r\n              </ul>\r\n            </Box>\r\n            <Typography variant='h4'>\r\n              <strong>What's an NFT mode?</strong>\r\n            </Typography>\r\n            <Box>\r\n              <ul>\r\n                <li>it's a visual \"frame\" around an existing NFT</li>\r\n                <li>it may include a message written by the NFT owner</li>\r\n                <li>modes frame NFTs for specific contexts</li>\r\n                <li>modes make NFTs more useful</li>\r\n                <li>modes are minted to become NFTs themselves</li>\r\n              </ul>\r\n            </Box>\r\n            <Typography variant='h4'>\r\n              <strong>What can your mode add to an existing NFT?</strong>\r\n            </Typography>\r\n            <Box>\r\n              <ul>\r\n                <li>contextual relevance</li>\r\n                <li>feeling</li>\r\n                <li>art</li>\r\n                <li>character</li>\r\n              </ul>\r\n            </Box>\r\n            {/* <Typography variant='h4'>\r\n              <strong>What are modes used for?</strong>\r\n            </Typography>\r\n            <Box>\r\n              <ul>\r\n                <li>\r\n                  a visual mode and NFT combine to create an on-chain \"record\"\r\n                </li>\r\n                <li>NFT owners select a mode when making a record</li>\r\n                <li>NFT owners may add their own message to this record</li>\r\n                <li>NFT owners mint their NFT's new record</li>\r\n                <li>minting a record creates a new NFT</li>\r\n              </ul>\r\n            </Box>\r\n            <Typography sx={{ mt: theme.spacing(6) }} variant='h4'>\r\n              <strong>What exactly is a record?</strong>\r\n            </Typography>\r\n            <Box>\r\n              <ul>\r\n                <li>records are ERC-721 NFTs with on-chain metadata</li>\r\n                <li>records can only be made by the verified NFT owner</li>\r\n                <li>\r\n                  records are unalterable, freely accessible and transferable\r\n                </li>\r\n                <li>records build on the existence story of an NFT</li>\r\n                <li>records exhibit the relationship between owner(s) and NFT</li>\r\n                <li>\r\n                  records are an extendable provenance for an existing NFT\r\n                </li>\r\n                <li>\r\n                  your mode name and a portion of your crypto address are\r\n                  included in the new record's on-chain metadata\r\n                </li>\r\n              </ul>\r\n            </Box> */}\r\n            <Typography variant='h4'>\r\n              <strong>How do you get paid?</strong>\r\n            </Typography>\r\n            <Box>\r\n              <ul>\r\n                <li>\r\n                  you will be paid in Matic sent to your wallet address on\r\n                  Polygon\r\n                </li>\r\n                <li>\r\n                  payments are made every Sunday for sales in the previous\r\n                  period\r\n                </li>\r\n                <li>Metamask supports Polygon</li>\r\n                <li>\r\n                  <a\r\n                    href='https://docs.polygon.technology/docs/develop/metamask/config-polygon-on-metamask/'\r\n                    target='blank'\r\n                  >\r\n                    Set up Metamask for Polygon\r\n                  </a>\r\n                </li>\r\n              </ul>\r\n            </Box>\r\n            <Box sx={{ mt: theme.spacing(6) }}>\r\n              <strong>Mode Submissions</strong>\r\n              <ul>\r\n                <li>\r\n                  send submissions to:{' '}\r\n                  <a href='mailto:modes@visible.love'>modes@visible.love</a>\r\n                </li>\r\n                <li>we will not accept all modes submitted</li>\r\n                <li>make sure to include the specs below</li>\r\n                <li>experimentation is welcome</li>\r\n                <li>\r\n                  Good modes should make existing NFTs more meaningful and\r\n                  useful in different contexts.\r\n                </li>\r\n              </ul>\r\n            </Box>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid sx={{ mt: theme.spacing(0) }} xs={12} md={6} item>\r\n          <img\r\n            src={simpleRecord}\r\n            alt='example NFT record'\r\n            title='Sample Record'\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Grid\r\n        direction='row'\r\n        alignItems='center'\r\n        justifyContent='center'\r\n        xs={12}\r\n        spacing={3}\r\n        container\r\n      >\r\n        {/* <Grid xs={12} item> */}\r\n        {/* <Box textAlign={'center'}>\r\n            <Typography\r\n              sx={{\r\n                mt: theme.spacing(8),\r\n                pl: theme.spacing(3),\r\n                fontSize: '36px',\r\n              }}\r\n              variant='h4'\r\n            >\r\n              <strong>Diagram</strong>\r\n            </Typography> */}\r\n        {/* </Box> */}\r\n        {/* </Grid> */}\r\n\r\n\r\n        <Grid\r\n          sx={{ mt: theme.spacing(2) }}\r\n          xs={12}\r\n\r\n          item\r\n        >\r\n          <Typography\r\n            sx={{\r\n              mt: theme.spacing(8),\r\n              mb: theme.spacing(6),\r\n              pl: theme.spacing(3),\r\n              fontSize: '36px',\r\n            }}\r\n            variant='h4'\r\n          >\r\n            <strong>Required Specs</strong>\r\n          </Typography>\r\n          <Box>\r\n            <strong>Format</strong>\r\n            <ul>\r\n              <li>SVG</li>\r\n              <li>size, layout and dimensions are up to you</li>\r\n              <li>art/design is up to you</li>\r\n            </ul>\r\n          </Box>\r\n          <Grid xs={12} md={6} item>\r\n            <img\r\n              src={diagram}\r\n              alt='example NFT record'\r\n              title='exapmle NFT Record Diagram'\r\n            />\r\n          </Grid>\r\n\r\n          <Box>\r\n            <strong>A. Owners NFT</strong>\r\n            <ul>\r\n              <li>\r\n                your mode should work with images from a specific NFT project\r\n              </li>\r\n              <li>\r\n                format your mode with original NFT image dimensions in mind. for\r\n                example BAYC images are square (631px by 631px)\r\n              </li>\r\n            </ul>\r\n          </Box>\r\n          <Box>\r\n            <strong>B. Header</strong>\r\n            <ul>\r\n              <li>font, font size, placement is up to you</li>\r\n              <li>\r\n                outline the header text so the font renders accurately across\r\n                systems\r\n              </li>\r\n            </ul>\r\n          </Box>\r\n          <Box>\r\n            <strong>C. Owner Message</strong>\r\n            <ul>\r\n              <li>modes store up to 200 character messages on-chain</li>\r\n              <li>\r\n                your SVG should have 4 text tag areas of 50 characters each\r\n              </li>\r\n              <li>fill text tags with dummy text. do not outline this text</li>\r\n              <li>font size, placement is up to you</li>\r\n            </ul>\r\n          </Box>\r\n          <Box>\r\n            <strong>D. Provenance Stack Header</strong>\r\n            <ul>\r\n              <li>your mode should include a \"Provenance Stack\" header</li>\r\n              <li>\r\n                outline this text so it renders consistently across systems{' '}\r\n              </li>\r\n              <li>font, font size, placement is up to you</li>\r\n            </ul>\r\n          </Box>\r\n          <Box>\r\n            <strong>E. Provenance Stack</strong>\r\n            <ul>\r\n              <li>include four text tag areas</li>\r\n              <li>format them in a similar manner as the example</li>\r\n              <li>do not outline this text</li>\r\n              <li>font size is up to you</li>\r\n            </ul>\r\n          </Box>\r\n          <Box>\r\n            <strong>F. Record Description</strong>\r\n            <ul>\r\n              <li>your mode should include this record description</li>\r\n              <li>font and font size is up to you</li>\r\n              <li>do outline this text</li>\r\n            </ul>\r\n          </Box>\r\n          <Box>\r\n            <strong>Licensing of Artwork</strong>\r\n            <ul>\r\n              <li>\r\n                all modes and artwork minted on Visible are licensced creative\r\n                commons{' '}\r\n                <a\r\n                  href='https://creativecommons.org/publicdomain/zero/1.0/'\r\n                  target='blank'\r\n                >\r\n                  CC0 1.0\r\n                </a>\r\n              </li>\r\n              <li>\r\n                you acknowledge this prior to sending us your\r\n                artwork/mode/submission\r\n              </li>\r\n              <li>\r\n                once a customer mints a record with your artwork/mode, that\r\n                record, NFT and anything derivative belongs to the customer\r\n                outright with no residual ownership, rights, or commission\r\n                retained by Visible or the mode artist (you)\r\n              </li>\r\n              <li>\r\n                if at any time you want your modes removed from Visible, we will\r\n                do so at your request\r\n              </li>\r\n              <li>\r\n                we cannot remove from any blockchain nor will we have any\r\n                control over modes/artwork that have already been minted prior\r\n                to your art's removal from Visible\r\n              </li>\r\n            </ul>\r\n          </Box>\r\n          {/* <Box\r\n            sx={{\r\n              mb: theme.spacing(5),\r\n              mt: theme.spacing(10),\r\n              fontSize: '36px',\r\n            }}\r\n          >\r\n            <strong>Final Thoughts</strong>\r\n          </Box> */}\r\n          {/* <Typography variant='h4'>\r\n            <strong>Why should you create modes?</strong>\r\n          </Typography> */}\r\n          {/* <Box>\r\n            <ul>\r\n              <li>put your artistic talent to work</li>\r\n              <li>\r\n                earn money everytime an NFT owner uses your mode to mint a\r\n                record\r\n              </li>\r\n              <li>\r\n                be a part of defining art in an undefined medium\r\n              </li>\r\n              <li>\r\n                create \"forever art\" that is unalterable, freely accessible and\r\n                transferable\r\n              </li>\r\n            </ul>\r\n          </Box> */}\r\n\r\n          <Typography sx={{ mt: theme.spacing(4) }} variant='h4'>\r\n            <strong>Questions?</strong>\r\n          </Typography>\r\n          <Box sx={{ mt: theme.spacing(2) }}>\r\n            Get in touch at{' '}\r\n            <a href='mailto:modes@visible.love'>modes@visible.love</a>\r\n          </Box>\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ModeMaker;\r\n","export default __webpack_public_path__ + \"static/media/verifiedOnwerDog.53026d69.png\";","import React, { useEffect } from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Redirect,\r\n  Switch,\r\n} from 'react-router-dom';\r\nimport { ThemeProvider } from '@mui/material/styles';\r\nimport ReactGA from 'react-ga';\r\n\r\nimport MainNavigation from './components/navigation/MainNavigation';\r\nimport { AuthContext } from './shared/context/auth-context';\r\nimport { useAuth } from './shared/hooks/auth-hook';\r\nimport Main from './pages/Main';\r\nimport Footer from './components/navigation/Footer';\r\nimport ModeMaker from './pages/ModeMaker';\r\n\r\nimport theme from './Styles';\r\n\r\nconst App = () => {\r\n  const {\r\n    checkWalletIsConnected,\r\n    provider,\r\n    detect,\r\n    currentAccount,\r\n    BTTokenCheck,\r\n    chainId,\r\n  } = useAuth();\r\n\r\n  detect();\r\n\r\n  useEffect(() => {\r\n    ReactGA.initialize('UA-222183592-2');\r\n    ReactGA.pageview(window.location.pathname + window.location.search);\r\n  }, []);\r\n\r\n  let routes;\r\n\r\n  if (provider.selectedAddress) {\r\n    routes = (\r\n      <Switch>\r\n        <Route path='/' exact>\r\n          <Main />\r\n        </Route>\r\n        <Route path='/mode' exact>\r\n          <ModeMaker />\r\n        </Route>\r\n        <Redirect to='/' />\r\n      </Switch>\r\n    );\r\n  } else {\r\n    routes = (\r\n      <Switch>\r\n        <Route path='/mode' exact>\r\n          <ModeMaker />\r\n        </Route>\r\n        <Route path='/' exact>\r\n          <Main />\r\n        </Route>\r\n        <Redirect to='/' />\r\n      </Switch>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        checkWalletIsConnected,\r\n        provider,\r\n        detect,\r\n        currentAccount,\r\n        BTTokenCheck,\r\n        chainId,\r\n      }}\r\n    >\r\n      <ThemeProvider theme={theme}>\r\n        <Router>\r\n          <MainNavigation />\r\n          <main>{routes}</main>\r\n          <Footer />\r\n        </Router>\r\n      </ThemeProvider>\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { useState, useCallback, useEffect } from 'react';\r\n\r\nimport { createAlchemyWeb3 } from '@alch/alchemy-web3';\r\n\r\nimport BuilderTokens from '../../assets/contracts/BuilderTokens.json';\r\nimport detectProvider from '@metamask/detect-provider';\r\nimport Web3 from 'web3';\r\n\r\nexport const useAuth = () => {\r\n  const [BTTokenCheck, setBTTokenCheck] = useState(false);\r\n  const [provider, setProvider] = useState('');\r\n  const [currentAccount, setCurrentAccount] = useState('');\r\n  const [chainId, setChainId] = useState('');\r\n\r\n\r\n  const detect = useCallback(async () => {\r\n    const provider = await detectProvider();\r\n    const web3 = new Web3(provider);\r\n    const accounts = await web3.eth.getAccounts();\r\n    const userAddress = accounts[0];\r\n    const chainId = await web3.eth.net.getId();\r\n    setChainId(chainId);\r\n    if (provider) {\r\n      setProvider(provider);\r\n      setCurrentAccount(userAddress);\r\n    }\r\n  }, []);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    if (window.ethereum) {\r\n      window.ethereum.on('chainChanged', () => {\r\n        detect();\r\n      });\r\n      window.ethereum.on('accountsChanged', () => {\r\n        window.location.reload();\r\n      });\r\n    }\r\n  }, [detect]);\r\n\r\n  // useEffect(() => {\r\n  //   if (currentAccount) {\r\n  //     if (chainId === 1) {\r\n  //       const alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\r\n  //       const alchemy = async () => {\r\n  //         if (chainId === 1) {\r\n  //           let userAddress;\r\n  //           let BTContract;\r\n  //           try {\r\n  //           const web3 = createAlchemyWeb3(alchemyKey);\r\n  //           const accounts = await web3.eth.getAccounts();\r\n  //            userAddress = accounts[0];\r\n  //           const networkId = await web3.eth.net.getId();\r\n  //           BTContract = new web3.eth.Contract(\r\n  //             BuilderTokens.abi,\r\n  //             BuilderTokens.networks[networkId].address\r\n  //           );\r\n  //           } catch (err) {\r\n  //             throw new Error(\r\n  //               'Failed to connect to ethereum at Auth context.'\r\n  //             )\r\n  //           }\r\n  //           let BTTokensOwned;\r\n  //           try {\r\n  //             BTTokensOwned = await BTContract.methods\r\n  //               .balanceOf(userAddress)\r\n  //               .call();\r\n  //           } catch (err) {\r\n  //             throw new Error(\r\n  //               'Network error. Unable to retrieve Builder Token balance of user.',\r\n  //               424\r\n  //             );\r\n  //           }\r\n\r\n  //           if (BTTokensOwned && BTTokensOwned >= 1) {\r\n  //             setBTTokenCheck(true);\r\n  //           }\r\n\r\n  //           console.log('bttokens owned ETH:', BTTokensOwned);\r\n  //         }\r\n  //       };\r\n  //       alchemy();\r\n  //     }\r\n  //   }\r\n  // }, [chainId, currentAccount, provider]);\r\n\r\n  // useEffect(() => {\r\n  //   if (currentAccount) {\r\n  //     if (chainId === 137) {\r\n  //       const initBTTokenCheckPolygon = async () => {\r\n  //         const provider = await detectProvider();\r\n  //         const web3 = new Web3(provider);\r\n  //         const userAddress = provider.selectedAddress;\r\n  //         const networkId = await web3.eth.net.getId();\r\n  //         const BTContract = new web3.eth.Contract(\r\n  //           BuilderTokens.abi,\r\n  //           BuilderTokens.networks[networkId].address\r\n  //         );\r\n  //         let BTTokensOwned;\r\n  //         try {\r\n  //           BTTokensOwned = await BTContract.methods\r\n  //             .balanceOf(userAddress)\r\n  //             .call();\r\n  //         } catch (err) {\r\n  //           throw new Error(\r\n  //             'Network error. Unable to retrieve Builder Token balance of user.',\r\n  //             424\r\n  //           );\r\n  //         }\r\n\r\n  //         if (BTTokensOwned && BTTokensOwned >= 1) {\r\n  //           setBTTokenCheck(true);\r\n  //         }\r\n\r\n  //         console.log('bttokens owned Polygon:', BTTokensOwned);\r\n  //       };\r\n  //       initBTTokenCheckPolygon();\r\n  //     }\r\n  //   }\r\n  // }, [chainId, currentAccount, provider]);\r\n\r\n  // useEffect(() => {\r\n  //   if (currentAccount) {\r\n  //     if (chainId === 80001) {\r\n  //       const initBTTokenCheckMumbai = async () => {\r\n  //         const provider = await detectProvider();\r\n  //         const web3 = new Web3(provider);\r\n  //         const accounts = await web3.eth.getAccounts();\r\n  //         const userAddress = accounts[0];\r\n  //         const networkId = await web3.eth.net.getId();\r\n  //         const BTContract = new web3.eth.Contract(\r\n  //           BuilderTokens.abi,\r\n  //           BuilderTokens.networks[networkId].address\r\n  //         );\r\n  //         let BTTokensOwned;\r\n  //         try {\r\n  //           BTTokensOwned = await BTContract.methods\r\n  //             .balanceOf(userAddress)\r\n  //             .call();\r\n  //         } catch (err) {\r\n  //           throw new Error(\r\n  //             'Network error. Unable to retrieve Builder Token balance of user.',\r\n  //             424\r\n  //           );\r\n  //         }\r\n\r\n  //         if (BTTokensOwned && BTTokensOwned >= 1) {\r\n  //           setBTTokenCheck(true);\r\n  //         }\r\n\r\n  //         console.log('bttokens owned Mumbai:', BTTokensOwned);\r\n  //       };\r\n  //       initBTTokenCheckMumbai();\r\n  //     }\r\n  //   }\r\n  // }, [chainId, currentAccount, provider]);\r\n\r\n  const checkWalletIsConnected = useCallback(async () => {\r\n    const { ethereum } = window;\r\n\r\n    if (\r\n      typeof window === 'undefined' ||\r\n      typeof window.ethereum === 'undefined'\r\n    ) {\r\n      console.log('Make sure you have Metamask installed!');\r\n      return;\r\n    } else {\r\n      console.log('Wallet exists. Ready to connect.');\r\n    }\r\n    try {\r\n      const accounts = await ethereum.request({\r\n        method: 'eth_requestAccounts',\r\n      });\r\n      console.log('Found an account! Address: ', accounts[0]);\r\n      setCurrentAccount(accounts[0]);\r\n    } catch (error) {\r\n      console.log('Error: ', error);\r\n    }\r\n  }, []);\r\n\r\n  return {\r\n    checkWalletIsConnected,\r\n    provider,\r\n    detect,\r\n    currentAccount,\r\n    BTTokenCheck,\r\n    chainId,\r\n  };\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}